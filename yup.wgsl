struct FragmentOutput {
    @location(0) fragColor: vec4<f32>,
}

var<private> fragCoord_1: vec2<f32>;
var<private> fragColor: vec4<f32>;

fn dot2_(v: vec2<f32>) -> f32 {
    var v_1: vec2<f32>;

    v_1 = v;
    _ = v_1;
    _ = v_1;
    let _e4 = v_1;
    let _e5 = v_1;
    return dot(_e4, _e5);
}

fn dot2_1(v_2: vec3<f32>) -> f32 {
    var v_3: vec3<f32>;

    v_3 = v_2;
    _ = v_3;
    _ = v_3;
    let _e4 = v_3;
    let _e5 = v_3;
    return dot(_e4, _e5);
}

fn ndot(a: vec2<f32>, b: vec2<f32>) -> f32 {
    var a_1: vec2<f32>;
    var b_1: vec2<f32>;

    a_1 = a;
    b_1 = b;
    let _e4 = a_1;
    let _e6 = b_1;
    let _e9 = a_1;
    let _e11 = b_1;
    return ((_e4.x * _e6.x) - (_e9.y * _e11.y));
}

fn sdPlane(p: vec3<f32>) -> f32 {
    var p_1: vec3<f32>;

    p_1 = p;
    let _e2 = p_1;
    return _e2.y;
}

fn sdSphere(p_2: vec3<f32>, s: f32) -> f32 {
    var p_3: vec3<f32>;
    var s_1: f32;

    p_3 = p_2;
    s_1 = s;
    _ = p_3;
    let _e5 = p_3;
    let _e7 = s_1;
    return (length(_e5) - _e7);
}

fn sdBox(p_4: vec3<f32>, b_2: vec3<f32>) -> f32 {
    var p_5: vec3<f32>;
    var b_3: vec3<f32>;
    var d: vec3<f32>;

    p_5 = p_4;
    b_3 = b_2;
    _ = p_5;
    let _e5 = p_5;
    let _e7 = b_3;
    d = (abs(_e5) - _e7);
    let _e10 = d;
    _ = _e10.x;
    let _e12 = d;
    _ = _e12.y;
    let _e14 = d;
    _ = _e14.z;
    let _e16 = d;
    let _e18 = d;
    _ = max(_e16.y, _e18.z);
    let _e21 = d;
    let _e23 = d;
    _ = _e23.y;
    let _e25 = d;
    _ = _e25.z;
    let _e27 = d;
    let _e29 = d;
    _ = max(_e21.x, max(_e27.y, _e29.z));
    let _e34 = d;
    _ = _e34.x;
    let _e36 = d;
    _ = _e36.y;
    let _e38 = d;
    _ = _e38.z;
    let _e40 = d;
    let _e42 = d;
    _ = max(_e40.y, _e42.z);
    let _e45 = d;
    let _e47 = d;
    _ = _e47.y;
    let _e49 = d;
    _ = _e49.z;
    let _e51 = d;
    let _e53 = d;
    _ = d;
    let _e61 = d;
    _ = max(_e61, vec3<f32>(0.0));
    _ = d;
    let _e67 = d;
    return (min(max(_e45.x, max(_e51.y, _e53.z)), 0.0) + length(max(_e67, vec3<f32>(0.0))));
}

fn sdBoxFrame(p_6: vec3<f32>, b_4: vec3<f32>, e: f32) -> f32 {
    var p_7: vec3<f32>;
    var b_5: vec3<f32>;
    var e_1: f32;
    var q: vec3<f32>;

    p_7 = p_6;
    b_5 = b_4;
    e_1 = e;
    _ = p_7;
    let _e7 = p_7;
    let _e9 = b_5;
    p_7 = (abs(_e7) - _e9);
    let _e11 = p_7;
    let _e12 = e_1;
    _ = (_e11 + vec3<f32>(_e12));
    let _e15 = p_7;
    let _e16 = e_1;
    let _e20 = e_1;
    q = (abs((_e15 + vec3<f32>(_e16))) - vec3<f32>(_e20));
    let _e24 = p_7;
    let _e26 = q;
    let _e28 = q;
    _ = vec3<f32>(_e24.x, _e26.y, _e28.z);
    let _e32 = p_7;
    let _e34 = q;
    let _e36 = q;
    _ = max(vec3<f32>(_e32.x, _e34.y, _e36.z), vec3<f32>(0.0));
    let _e42 = p_7;
    let _e44 = q;
    let _e46 = q;
    _ = vec3<f32>(_e42.x, _e44.y, _e46.z);
    let _e50 = p_7;
    let _e52 = q;
    let _e54 = q;
    let _e61 = p_7;
    _ = _e61.x;
    let _e63 = q;
    _ = _e63.y;
    let _e65 = q;
    _ = _e65.z;
    let _e67 = q;
    let _e69 = q;
    _ = max(_e67.y, _e69.z);
    let _e72 = p_7;
    let _e74 = q;
    _ = _e74.y;
    let _e76 = q;
    _ = _e76.z;
    let _e78 = q;
    let _e80 = q;
    _ = max(_e72.x, max(_e78.y, _e80.z));
    let _e85 = p_7;
    _ = _e85.x;
    let _e87 = q;
    _ = _e87.y;
    let _e89 = q;
    _ = _e89.z;
    let _e91 = q;
    let _e93 = q;
    _ = max(_e91.y, _e93.z);
    let _e96 = p_7;
    let _e98 = q;
    _ = _e98.y;
    let _e100 = q;
    _ = _e100.z;
    let _e102 = q;
    let _e104 = q;
    _ = (length(max(vec3<f32>(_e50.x, _e52.y, _e54.z), vec3<f32>(0.0))) + min(max(_e96.x, max(_e102.y, _e104.z)), 0.0));
    let _e111 = q;
    let _e113 = p_7;
    let _e115 = q;
    _ = vec3<f32>(_e111.x, _e113.y, _e115.z);
    let _e119 = q;
    let _e121 = p_7;
    let _e123 = q;
    _ = max(vec3<f32>(_e119.x, _e121.y, _e123.z), vec3<f32>(0.0));
    let _e129 = q;
    let _e131 = p_7;
    let _e133 = q;
    _ = vec3<f32>(_e129.x, _e131.y, _e133.z);
    let _e137 = q;
    let _e139 = p_7;
    let _e141 = q;
    let _e148 = q;
    _ = _e148.x;
    let _e150 = p_7;
    _ = _e150.y;
    let _e152 = q;
    _ = _e152.z;
    let _e154 = p_7;
    let _e156 = q;
    _ = max(_e154.y, _e156.z);
    let _e159 = q;
    let _e161 = p_7;
    _ = _e161.y;
    let _e163 = q;
    _ = _e163.z;
    let _e165 = p_7;
    let _e167 = q;
    _ = max(_e159.x, max(_e165.y, _e167.z));
    let _e172 = q;
    _ = _e172.x;
    let _e174 = p_7;
    _ = _e174.y;
    let _e176 = q;
    _ = _e176.z;
    let _e178 = p_7;
    let _e180 = q;
    _ = max(_e178.y, _e180.z);
    let _e183 = q;
    let _e185 = p_7;
    _ = _e185.y;
    let _e187 = q;
    _ = _e187.z;
    let _e189 = p_7;
    let _e191 = q;
    _ = (length(max(vec3<f32>(_e137.x, _e139.y, _e141.z), vec3<f32>(0.0))) + min(max(_e183.x, max(_e189.y, _e191.z)), 0.0));
    let _e198 = p_7;
    let _e200 = q;
    let _e202 = q;
    _ = vec3<f32>(_e198.x, _e200.y, _e202.z);
    let _e206 = p_7;
    let _e208 = q;
    let _e210 = q;
    _ = max(vec3<f32>(_e206.x, _e208.y, _e210.z), vec3<f32>(0.0));
    let _e216 = p_7;
    let _e218 = q;
    let _e220 = q;
    _ = vec3<f32>(_e216.x, _e218.y, _e220.z);
    let _e224 = p_7;
    let _e226 = q;
    let _e228 = q;
    let _e235 = p_7;
    _ = _e235.x;
    let _e237 = q;
    _ = _e237.y;
    let _e239 = q;
    _ = _e239.z;
    let _e241 = q;
    let _e243 = q;
    _ = max(_e241.y, _e243.z);
    let _e246 = p_7;
    let _e248 = q;
    _ = _e248.y;
    let _e250 = q;
    _ = _e250.z;
    let _e252 = q;
    let _e254 = q;
    _ = max(_e246.x, max(_e252.y, _e254.z));
    let _e259 = p_7;
    _ = _e259.x;
    let _e261 = q;
    _ = _e261.y;
    let _e263 = q;
    _ = _e263.z;
    let _e265 = q;
    let _e267 = q;
    _ = max(_e265.y, _e267.z);
    let _e270 = p_7;
    let _e272 = q;
    _ = _e272.y;
    let _e274 = q;
    _ = _e274.z;
    let _e276 = q;
    let _e278 = q;
    let _e285 = q;
    let _e287 = p_7;
    let _e289 = q;
    _ = vec3<f32>(_e285.x, _e287.y, _e289.z);
    let _e293 = q;
    let _e295 = p_7;
    let _e297 = q;
    _ = max(vec3<f32>(_e293.x, _e295.y, _e297.z), vec3<f32>(0.0));
    let _e303 = q;
    let _e305 = p_7;
    let _e307 = q;
    _ = vec3<f32>(_e303.x, _e305.y, _e307.z);
    let _e311 = q;
    let _e313 = p_7;
    let _e315 = q;
    let _e322 = q;
    _ = _e322.x;
    let _e324 = p_7;
    _ = _e324.y;
    let _e326 = q;
    _ = _e326.z;
    let _e328 = p_7;
    let _e330 = q;
    _ = max(_e328.y, _e330.z);
    let _e333 = q;
    let _e335 = p_7;
    _ = _e335.y;
    let _e337 = q;
    _ = _e337.z;
    let _e339 = p_7;
    let _e341 = q;
    _ = max(_e333.x, max(_e339.y, _e341.z));
    let _e346 = q;
    _ = _e346.x;
    let _e348 = p_7;
    _ = _e348.y;
    let _e350 = q;
    _ = _e350.z;
    let _e352 = p_7;
    let _e354 = q;
    _ = max(_e352.y, _e354.z);
    let _e357 = q;
    let _e359 = p_7;
    _ = _e359.y;
    let _e361 = q;
    _ = _e361.z;
    let _e363 = p_7;
    let _e365 = q;
    _ = min((length(max(vec3<f32>(_e224.x, _e226.y, _e228.z), vec3<f32>(0.0))) + min(max(_e270.x, max(_e276.y, _e278.z)), 0.0)), (length(max(vec3<f32>(_e311.x, _e313.y, _e315.z), vec3<f32>(0.0))) + min(max(_e357.x, max(_e363.y, _e365.z)), 0.0)));
    let _e373 = q;
    let _e375 = q;
    let _e377 = p_7;
    _ = vec3<f32>(_e373.x, _e375.y, _e377.z);
    let _e381 = q;
    let _e383 = q;
    let _e385 = p_7;
    _ = max(vec3<f32>(_e381.x, _e383.y, _e385.z), vec3<f32>(0.0));
    let _e391 = q;
    let _e393 = q;
    let _e395 = p_7;
    _ = vec3<f32>(_e391.x, _e393.y, _e395.z);
    let _e399 = q;
    let _e401 = q;
    let _e403 = p_7;
    let _e410 = q;
    _ = _e410.x;
    let _e412 = q;
    _ = _e412.y;
    let _e414 = p_7;
    _ = _e414.z;
    let _e416 = q;
    let _e418 = p_7;
    _ = max(_e416.y, _e418.z);
    let _e421 = q;
    let _e423 = q;
    _ = _e423.y;
    let _e425 = p_7;
    _ = _e425.z;
    let _e427 = q;
    let _e429 = p_7;
    _ = max(_e421.x, max(_e427.y, _e429.z));
    let _e434 = q;
    _ = _e434.x;
    let _e436 = q;
    _ = _e436.y;
    let _e438 = p_7;
    _ = _e438.z;
    let _e440 = q;
    let _e442 = p_7;
    _ = max(_e440.y, _e442.z);
    let _e445 = q;
    let _e447 = q;
    _ = _e447.y;
    let _e449 = p_7;
    _ = _e449.z;
    let _e451 = q;
    let _e453 = p_7;
    _ = (length(max(vec3<f32>(_e399.x, _e401.y, _e403.z), vec3<f32>(0.0))) + min(max(_e445.x, max(_e451.y, _e453.z)), 0.0));
    let _e460 = p_7;
    let _e462 = q;
    let _e464 = q;
    _ = vec3<f32>(_e460.x, _e462.y, _e464.z);
    let _e468 = p_7;
    let _e470 = q;
    let _e472 = q;
    _ = max(vec3<f32>(_e468.x, _e470.y, _e472.z), vec3<f32>(0.0));
    let _e478 = p_7;
    let _e480 = q;
    let _e482 = q;
    _ = vec3<f32>(_e478.x, _e480.y, _e482.z);
    let _e486 = p_7;
    let _e488 = q;
    let _e490 = q;
    let _e497 = p_7;
    _ = _e497.x;
    let _e499 = q;
    _ = _e499.y;
    let _e501 = q;
    _ = _e501.z;
    let _e503 = q;
    let _e505 = q;
    _ = max(_e503.y, _e505.z);
    let _e508 = p_7;
    let _e510 = q;
    _ = _e510.y;
    let _e512 = q;
    _ = _e512.z;
    let _e514 = q;
    let _e516 = q;
    _ = max(_e508.x, max(_e514.y, _e516.z));
    let _e521 = p_7;
    _ = _e521.x;
    let _e523 = q;
    _ = _e523.y;
    let _e525 = q;
    _ = _e525.z;
    let _e527 = q;
    let _e529 = q;
    _ = max(_e527.y, _e529.z);
    let _e532 = p_7;
    let _e534 = q;
    _ = _e534.y;
    let _e536 = q;
    _ = _e536.z;
    let _e538 = q;
    let _e540 = q;
    _ = (length(max(vec3<f32>(_e486.x, _e488.y, _e490.z), vec3<f32>(0.0))) + min(max(_e532.x, max(_e538.y, _e540.z)), 0.0));
    let _e547 = q;
    let _e549 = p_7;
    let _e551 = q;
    _ = vec3<f32>(_e547.x, _e549.y, _e551.z);
    let _e555 = q;
    let _e557 = p_7;
    let _e559 = q;
    _ = max(vec3<f32>(_e555.x, _e557.y, _e559.z), vec3<f32>(0.0));
    let _e565 = q;
    let _e567 = p_7;
    let _e569 = q;
    _ = vec3<f32>(_e565.x, _e567.y, _e569.z);
    let _e573 = q;
    let _e575 = p_7;
    let _e577 = q;
    let _e584 = q;
    _ = _e584.x;
    let _e586 = p_7;
    _ = _e586.y;
    let _e588 = q;
    _ = _e588.z;
    let _e590 = p_7;
    let _e592 = q;
    _ = max(_e590.y, _e592.z);
    let _e595 = q;
    let _e597 = p_7;
    _ = _e597.y;
    let _e599 = q;
    _ = _e599.z;
    let _e601 = p_7;
    let _e603 = q;
    _ = max(_e595.x, max(_e601.y, _e603.z));
    let _e608 = q;
    _ = _e608.x;
    let _e610 = p_7;
    _ = _e610.y;
    let _e612 = q;
    _ = _e612.z;
    let _e614 = p_7;
    let _e616 = q;
    _ = max(_e614.y, _e616.z);
    let _e619 = q;
    let _e621 = p_7;
    _ = _e621.y;
    let _e623 = q;
    _ = _e623.z;
    let _e625 = p_7;
    let _e627 = q;
    _ = (length(max(vec3<f32>(_e573.x, _e575.y, _e577.z), vec3<f32>(0.0))) + min(max(_e619.x, max(_e625.y, _e627.z)), 0.0));
    let _e634 = p_7;
    let _e636 = q;
    let _e638 = q;
    _ = vec3<f32>(_e634.x, _e636.y, _e638.z);
    let _e642 = p_7;
    let _e644 = q;
    let _e646 = q;
    _ = max(vec3<f32>(_e642.x, _e644.y, _e646.z), vec3<f32>(0.0));
    let _e652 = p_7;
    let _e654 = q;
    let _e656 = q;
    _ = vec3<f32>(_e652.x, _e654.y, _e656.z);
    let _e660 = p_7;
    let _e662 = q;
    let _e664 = q;
    let _e671 = p_7;
    _ = _e671.x;
    let _e673 = q;
    _ = _e673.y;
    let _e675 = q;
    _ = _e675.z;
    let _e677 = q;
    let _e679 = q;
    _ = max(_e677.y, _e679.z);
    let _e682 = p_7;
    let _e684 = q;
    _ = _e684.y;
    let _e686 = q;
    _ = _e686.z;
    let _e688 = q;
    let _e690 = q;
    _ = max(_e682.x, max(_e688.y, _e690.z));
    let _e695 = p_7;
    _ = _e695.x;
    let _e697 = q;
    _ = _e697.y;
    let _e699 = q;
    _ = _e699.z;
    let _e701 = q;
    let _e703 = q;
    _ = max(_e701.y, _e703.z);
    let _e706 = p_7;
    let _e708 = q;
    _ = _e708.y;
    let _e710 = q;
    _ = _e710.z;
    let _e712 = q;
    let _e714 = q;
    let _e721 = q;
    let _e723 = p_7;
    let _e725 = q;
    _ = vec3<f32>(_e721.x, _e723.y, _e725.z);
    let _e729 = q;
    let _e731 = p_7;
    let _e733 = q;
    _ = max(vec3<f32>(_e729.x, _e731.y, _e733.z), vec3<f32>(0.0));
    let _e739 = q;
    let _e741 = p_7;
    let _e743 = q;
    _ = vec3<f32>(_e739.x, _e741.y, _e743.z);
    let _e747 = q;
    let _e749 = p_7;
    let _e751 = q;
    let _e758 = q;
    _ = _e758.x;
    let _e760 = p_7;
    _ = _e760.y;
    let _e762 = q;
    _ = _e762.z;
    let _e764 = p_7;
    let _e766 = q;
    _ = max(_e764.y, _e766.z);
    let _e769 = q;
    let _e771 = p_7;
    _ = _e771.y;
    let _e773 = q;
    _ = _e773.z;
    let _e775 = p_7;
    let _e777 = q;
    _ = max(_e769.x, max(_e775.y, _e777.z));
    let _e782 = q;
    _ = _e782.x;
    let _e784 = p_7;
    _ = _e784.y;
    let _e786 = q;
    _ = _e786.z;
    let _e788 = p_7;
    let _e790 = q;
    _ = max(_e788.y, _e790.z);
    let _e793 = q;
    let _e795 = p_7;
    _ = _e795.y;
    let _e797 = q;
    _ = _e797.z;
    let _e799 = p_7;
    let _e801 = q;
    let _e809 = q;
    let _e811 = q;
    let _e813 = p_7;
    _ = vec3<f32>(_e809.x, _e811.y, _e813.z);
    let _e817 = q;
    let _e819 = q;
    let _e821 = p_7;
    _ = max(vec3<f32>(_e817.x, _e819.y, _e821.z), vec3<f32>(0.0));
    let _e827 = q;
    let _e829 = q;
    let _e831 = p_7;
    _ = vec3<f32>(_e827.x, _e829.y, _e831.z);
    let _e835 = q;
    let _e837 = q;
    let _e839 = p_7;
    let _e846 = q;
    _ = _e846.x;
    let _e848 = q;
    _ = _e848.y;
    let _e850 = p_7;
    _ = _e850.z;
    let _e852 = q;
    let _e854 = p_7;
    _ = max(_e852.y, _e854.z);
    let _e857 = q;
    let _e859 = q;
    _ = _e859.y;
    let _e861 = p_7;
    _ = _e861.z;
    let _e863 = q;
    let _e865 = p_7;
    _ = max(_e857.x, max(_e863.y, _e865.z));
    let _e870 = q;
    _ = _e870.x;
    let _e872 = q;
    _ = _e872.y;
    let _e874 = p_7;
    _ = _e874.z;
    let _e876 = q;
    let _e878 = p_7;
    _ = max(_e876.y, _e878.z);
    let _e881 = q;
    let _e883 = q;
    _ = _e883.y;
    let _e885 = p_7;
    _ = _e885.z;
    let _e887 = q;
    let _e889 = p_7;
    return min(min((length(max(vec3<f32>(_e660.x, _e662.y, _e664.z), vec3<f32>(0.0))) + min(max(_e706.x, max(_e712.y, _e714.z)), 0.0)), (length(max(vec3<f32>(_e747.x, _e749.y, _e751.z), vec3<f32>(0.0))) + min(max(_e793.x, max(_e799.y, _e801.z)), 0.0))), (length(max(vec3<f32>(_e835.x, _e837.y, _e839.z), vec3<f32>(0.0))) + min(max(_e881.x, max(_e887.y, _e889.z)), 0.0)));
}

fn sdEllipsoid(p_8: vec3<f32>, r: vec3<f32>) -> f32 {
    var p_9: vec3<f32>;
    var r_1: vec3<f32>;
    var k0_: f32;
    var k1_: f32;

    p_9 = p_8;
    r_1 = r;
    let _e4 = p_9;
    let _e5 = r_1;
    _ = (_e4 / _e5);
    let _e7 = p_9;
    let _e8 = r_1;
    k0_ = length((_e7 / _e8));
    let _e12 = p_9;
    let _e13 = r_1;
    let _e14 = r_1;
    _ = (_e12 / (_e13 * _e14));
    let _e17 = p_9;
    let _e18 = r_1;
    let _e19 = r_1;
    k1_ = length((_e17 / (_e18 * _e19)));
    let _e24 = k0_;
    let _e25 = k0_;
    let _e29 = k1_;
    return ((_e24 * (_e25 - 1.0)) / _e29);
}

fn sdTorus(p_10: vec3<f32>, t: vec2<f32>) -> f32 {
    var p_11: vec3<f32>;
    var t_1: vec2<f32>;

    p_11 = p_10;
    t_1 = t;
    let _e4 = p_11;
    _ = _e4.xz;
    let _e6 = p_11;
    let _e9 = t_1;
    let _e12 = p_11;
    _ = vec2<f32>((length(_e6.xz) - _e9.x), _e12.y);
    let _e15 = p_11;
    _ = _e15.xz;
    let _e17 = p_11;
    let _e20 = t_1;
    let _e23 = p_11;
    let _e27 = t_1;
    return (length(vec2<f32>((length(_e17.xz) - _e20.x), _e23.y)) - _e27.y);
}

fn sdCappedTorus(p_12: vec3<f32>, sc: vec2<f32>, ra: f32, rb: f32) -> f32 {
    var p_13: vec3<f32>;
    var sc_1: vec2<f32>;
    var ra_1: f32;
    var rb_1: f32;
    var local: f32;
    var k: f32;

    p_13 = p_12;
    sc_1 = sc;
    ra_1 = ra;
    rb_1 = rb;
    let _e9 = p_13;
    _ = _e9.x;
    let _e11 = p_13;
    p_13.x = abs(_e11.x);
    let _e14 = sc_1;
    let _e16 = p_13;
    let _e19 = sc_1;
    let _e21 = p_13;
    if ((_e14.y * _e16.x) > (_e19.x * _e21.y)) {
        let _e25 = p_13;
        _ = _e25.xy;
        _ = sc_1;
        let _e28 = p_13;
        let _e30 = sc_1;
        local = dot(_e28.xy, _e30);
    } else {
        let _e32 = p_13;
        _ = _e32.xy;
        let _e34 = p_13;
        local = length(_e34.xy);
    }
    let _e38 = local;
    k = _e38;
    _ = p_13;
    _ = p_13;
    let _e42 = p_13;
    let _e43 = p_13;
    let _e45 = ra_1;
    let _e46 = ra_1;
    let _e50 = ra_1;
    let _e52 = k;
    _ = ((dot(_e42, _e43) + (_e45 * _e46)) - ((2.0 * _e50) * _e52));
    _ = p_13;
    _ = p_13;
    let _e57 = p_13;
    let _e58 = p_13;
    let _e60 = ra_1;
    let _e61 = ra_1;
    let _e65 = ra_1;
    let _e67 = k;
    let _e71 = rb_1;
    return (sqrt(((dot(_e57, _e58) + (_e60 * _e61)) - ((2.0 * _e65) * _e67))) - _e71);
}

fn sdHexPrism(p_14: vec3<f32>, h: vec2<f32>) -> f32 {
    var p_15: vec3<f32>;
    var h_1: vec2<f32>;
    var q_1: vec3<f32>;
    var k_1: vec3<f32>;
    var d_1: vec2<f32>;

    p_15 = p_14;
    h_1 = h;
    _ = p_15;
    let _e5 = p_15;
    q_1 = abs(_e5);
    k_1 = vec3<f32>(-(0.8660253882408142), 0.5, 0.5773500204086304);
    _ = p_15;
    let _e15 = p_15;
    p_15 = abs(_e15);
    let _e17 = p_15;
    _ = _e17.xy;
    let _e19 = p_15;
    let _e22 = k_1;
    _ = _e22.xy;
    let _e24 = p_15;
    _ = _e24.xy;
    let _e26 = k_1;
    let _e28 = p_15;
    _ = dot(_e26.xy, _e28.xy);
    let _e32 = k_1;
    _ = _e32.xy;
    let _e34 = p_15;
    _ = _e34.xy;
    let _e36 = k_1;
    let _e38 = p_15;
    let _e44 = k_1;
    let _e47 = (_e19.xy - ((2.0 * min(dot(_e36.xy, _e38.xy), 0.0)) * _e44.xy));
    p_15.x = _e47.x;
    p_15.y = _e47.y;
    let _e52 = p_15;
    let _e54 = p_15;
    _ = _e54.x;
    let _e56 = k_1;
    let _e59 = h_1;
    _ = (-(_e56.z) * _e59.x);
    let _e62 = k_1;
    let _e64 = h_1;
    _ = (_e62.z * _e64.x);
    let _e67 = p_15;
    let _e69 = k_1;
    let _e72 = h_1;
    let _e75 = k_1;
    let _e77 = h_1;
    let _e81 = h_1;
    _ = (_e52.xy - vec2<f32>(clamp(_e67.x, (-(_e69.z) * _e72.x), (_e75.z * _e77.x)), _e81.x));
    let _e85 = p_15;
    let _e87 = p_15;
    _ = _e87.x;
    let _e89 = k_1;
    let _e92 = h_1;
    _ = (-(_e89.z) * _e92.x);
    let _e95 = k_1;
    let _e97 = h_1;
    _ = (_e95.z * _e97.x);
    let _e100 = p_15;
    let _e102 = k_1;
    let _e105 = h_1;
    let _e108 = k_1;
    let _e110 = h_1;
    let _e114 = h_1;
    let _e119 = p_15;
    let _e121 = h_1;
    _ = (_e119.y - _e121.x);
    let _e124 = p_15;
    let _e126 = h_1;
    let _e131 = p_15;
    let _e133 = h_1;
    d_1 = vec2<f32>((length((_e85.xy - vec2<f32>(clamp(_e100.x, (-(_e102.z) * _e105.x), (_e108.z * _e110.x)), _e114.x))) * sign((_e124.y - _e126.x))), (_e131.z - _e133.y));
    let _e138 = d_1;
    _ = _e138.x;
    let _e140 = d_1;
    _ = _e140.y;
    let _e142 = d_1;
    let _e144 = d_1;
    _ = max(_e142.x, _e144.y);
    let _e148 = d_1;
    _ = _e148.x;
    let _e150 = d_1;
    _ = _e150.y;
    let _e152 = d_1;
    let _e154 = d_1;
    _ = d_1;
    let _e161 = d_1;
    _ = max(_e161, vec2<f32>(0.0));
    _ = d_1;
    let _e167 = d_1;
    return (min(max(_e152.x, _e154.y), 0.0) + length(max(_e167, vec2<f32>(0.0))));
}

fn sdOctogonPrism(p_16: vec3<f32>, r_2: f32, h_2: f32) -> f32 {
    var p_17: vec3<f32>;
    var r_3: f32;
    var h_3: f32;
    var k_2: vec3<f32>;
    var d_2: vec2<f32>;

    p_17 = p_16;
    r_3 = r_2;
    h_3 = h_2;
    k_2 = vec3<f32>(-(0.9238795042037964), 0.3826834261417389, 0.4142135679721832);
    _ = p_17;
    let _e13 = p_17;
    p_17 = abs(_e13);
    let _e15 = p_17;
    _ = _e15.xy;
    let _e17 = p_17;
    let _e20 = k_2;
    let _e22 = k_2;
    _ = vec2<f32>(_e20.x, _e22.y);
    let _e25 = p_17;
    _ = _e25.xy;
    let _e27 = k_2;
    let _e29 = k_2;
    let _e32 = p_17;
    _ = dot(vec2<f32>(_e27.x, _e29.y), _e32.xy);
    let _e36 = k_2;
    let _e38 = k_2;
    _ = vec2<f32>(_e36.x, _e38.y);
    let _e41 = p_17;
    _ = _e41.xy;
    let _e43 = k_2;
    let _e45 = k_2;
    let _e48 = p_17;
    let _e54 = k_2;
    let _e56 = k_2;
    let _e60 = (_e17.xy - ((2.0 * min(dot(vec2<f32>(_e43.x, _e45.y), _e48.xy), 0.0)) * vec2<f32>(_e54.x, _e56.y)));
    p_17.x = _e60.x;
    p_17.y = _e60.y;
    let _e65 = p_17;
    _ = _e65.xy;
    let _e67 = p_17;
    let _e70 = k_2;
    let _e73 = k_2;
    _ = vec2<f32>(-(_e70.x), _e73.y);
    let _e76 = p_17;
    _ = _e76.xy;
    let _e78 = k_2;
    let _e81 = k_2;
    let _e84 = p_17;
    _ = dot(vec2<f32>(-(_e78.x), _e81.y), _e84.xy);
    let _e88 = k_2;
    let _e91 = k_2;
    _ = vec2<f32>(-(_e88.x), _e91.y);
    let _e94 = p_17;
    _ = _e94.xy;
    let _e96 = k_2;
    let _e99 = k_2;
    let _e102 = p_17;
    let _e108 = k_2;
    let _e111 = k_2;
    let _e115 = (_e67.xy - ((2.0 * min(dot(vec2<f32>(-(_e96.x), _e99.y), _e102.xy), 0.0)) * vec2<f32>(-(_e108.x), _e111.y)));
    p_17.x = _e115.x;
    p_17.y = _e115.y;
    let _e120 = p_17;
    _ = _e120.xy;
    let _e122 = p_17;
    let _e124 = p_17;
    _ = _e124.x;
    let _e126 = k_2;
    let _e129 = r_3;
    _ = (-(_e126.z) * _e129);
    let _e131 = k_2;
    let _e133 = r_3;
    _ = (_e131.z * _e133);
    let _e135 = p_17;
    let _e137 = k_2;
    let _e140 = r_3;
    let _e142 = k_2;
    let _e144 = r_3;
    let _e147 = r_3;
    let _e149 = (_e122.xy - vec2<f32>(clamp(_e135.x, (-(_e137.z) * _e140), (_e142.z * _e144)), _e147));
    p_17.x = _e149.x;
    p_17.y = _e149.y;
    let _e154 = p_17;
    _ = _e154.xy;
    let _e156 = p_17;
    let _e159 = p_17;
    _ = _e159.y;
    let _e161 = p_17;
    let _e165 = p_17;
    let _e167 = h_3;
    d_2 = vec2<f32>((length(_e156.xy) * sign(_e161.y)), (_e165.z - _e167));
    let _e171 = d_2;
    _ = _e171.x;
    let _e173 = d_2;
    _ = _e173.y;
    let _e175 = d_2;
    let _e177 = d_2;
    _ = max(_e175.x, _e177.y);
    let _e181 = d_2;
    _ = _e181.x;
    let _e183 = d_2;
    _ = _e183.y;
    let _e185 = d_2;
    let _e187 = d_2;
    _ = d_2;
    let _e194 = d_2;
    _ = max(_e194, vec2<f32>(0.0));
    _ = d_2;
    let _e200 = d_2;
    return (min(max(_e185.x, _e187.y), 0.0) + length(max(_e200, vec2<f32>(0.0))));
}

fn sdCapsule(p_18: vec3<f32>, a_2: vec3<f32>, b_6: vec3<f32>, r_4: f32) -> f32 {
    var p_19: vec3<f32>;
    var a_3: vec3<f32>;
    var b_7: vec3<f32>;
    var r_5: f32;
    var pa: vec3<f32>;
    var ba: vec3<f32>;
    var h_4: f32;

    p_19 = p_18;
    a_3 = a_2;
    b_7 = b_6;
    r_5 = r_4;
    let _e8 = p_19;
    let _e9 = a_3;
    pa = (_e8 - _e9);
    let _e12 = b_7;
    let _e13 = a_3;
    ba = (_e12 - _e13);
    _ = pa;
    _ = ba;
    let _e18 = pa;
    let _e19 = ba;
    _ = ba;
    _ = ba;
    let _e23 = ba;
    let _e24 = ba;
    _ = (dot(_e18, _e19) / dot(_e23, _e24));
    _ = pa;
    _ = ba;
    let _e31 = pa;
    let _e32 = ba;
    _ = ba;
    _ = ba;
    let _e36 = ba;
    let _e37 = ba;
    h_4 = clamp((dot(_e31, _e32) / dot(_e36, _e37)), 0.0, 1.0);
    let _e44 = pa;
    let _e45 = ba;
    let _e46 = h_4;
    _ = (_e44 - (_e45 * _e46));
    let _e49 = pa;
    let _e50 = ba;
    let _e51 = h_4;
    let _e55 = r_5;
    return (length((_e49 - (_e50 * _e51))) - _e55);
}

fn sdRoundCone(p_20: vec3<f32>, r1_: f32, r2_: f32, h_5: f32) -> f32 {
    var p_21: vec3<f32>;
    var r1_1: f32;
    var r2_1: f32;
    var h_6: f32;
    var q_2: vec2<f32>;
    var b_8: f32;
    var a_4: f32;
    var k_3: f32;

    p_21 = p_20;
    r1_1 = r1_;
    r2_1 = r2_;
    h_6 = h_5;
    let _e8 = p_21;
    _ = _e8.xz;
    let _e10 = p_21;
    let _e13 = p_21;
    q_2 = vec2<f32>(length(_e10.xz), _e13.y);
    let _e17 = r1_1;
    let _e18 = r2_1;
    let _e20 = h_6;
    b_8 = ((_e17 - _e18) / _e20);
    let _e24 = b_8;
    let _e25 = b_8;
    _ = (1.0 - (_e24 * _e25));
    let _e29 = b_8;
    let _e30 = b_8;
    a_4 = sqrt((1.0 - (_e29 * _e30)));
    _ = q_2;
    let _e36 = b_8;
    let _e38 = a_4;
    _ = vec2<f32>(-(_e36), _e38);
    let _e40 = q_2;
    let _e41 = b_8;
    let _e43 = a_4;
    k_3 = dot(_e40, vec2<f32>(-(_e41), _e43));
    let _e47 = k_3;
    if (_e47 < 0.0) {
        _ = q_2;
        let _e51 = q_2;
        let _e53 = r1_1;
        return (length(_e51) - _e53);
    }
    let _e55 = k_3;
    let _e56 = a_4;
    let _e57 = h_6;
    if (_e55 > (_e56 * _e57)) {
        let _e60 = q_2;
        let _e62 = h_6;
        _ = (_e60 - vec2<f32>(0.0, _e62));
        let _e65 = q_2;
        let _e67 = h_6;
        let _e71 = r2_1;
        return (length((_e65 - vec2<f32>(0.0, _e67))) - _e71);
    }
    _ = q_2;
    let _e74 = a_4;
    let _e75 = b_8;
    _ = vec2<f32>(_e74, _e75);
    let _e77 = q_2;
    let _e78 = a_4;
    let _e79 = b_8;
    let _e82 = r1_1;
    return (dot(_e77, vec2<f32>(_e78, _e79)) - _e82);
}

fn sdRoundCone_1(p_22: vec3<f32>, a_5: vec3<f32>, b_9: vec3<f32>, r1_2: f32, r2_2: f32) -> f32 {
    var p_23: vec3<f32>;
    var a_6: vec3<f32>;
    var b_10: vec3<f32>;
    var r1_3: f32;
    var r2_3: f32;
    var ba_1: vec3<f32>;
    var l2_: f32;
    var rr: f32;
    var a2_: f32;
    var il2_: f32;
    var pa_1: vec3<f32>;
    var y: f32;
    var z: f32;
    var x2_: f32;
    var y2_: f32;
    var z2_: f32;
    var k_4: f32;

    p_23 = p_22;
    a_6 = a_5;
    b_10 = b_9;
    r1_3 = r1_2;
    r2_3 = r2_2;
    let _e10 = b_10;
    let _e11 = a_6;
    ba_1 = (_e10 - _e11);
    _ = ba_1;
    _ = ba_1;
    let _e16 = ba_1;
    let _e17 = ba_1;
    l2_ = dot(_e16, _e17);
    let _e20 = r1_3;
    let _e21 = r2_3;
    rr = (_e20 - _e21);
    let _e24 = l2_;
    let _e25 = rr;
    let _e26 = rr;
    a2_ = (_e24 - (_e25 * _e26));
    let _e31 = l2_;
    il2_ = (1.0 / _e31);
    let _e34 = p_23;
    let _e35 = a_6;
    pa_1 = (_e34 - _e35);
    _ = pa_1;
    _ = ba_1;
    let _e40 = pa_1;
    let _e41 = ba_1;
    y = dot(_e40, _e41);
    let _e44 = y;
    let _e45 = l2_;
    z = (_e44 - _e45);
    let _e48 = pa_1;
    let _e49 = l2_;
    let _e51 = ba_1;
    let _e52 = y;
    _ = ((_e48 * _e49) - (_e51 * _e52));
    let _e55 = pa_1;
    let _e56 = l2_;
    let _e58 = ba_1;
    let _e59 = y;
    let _e62 = dot2_1(((_e55 * _e56) - (_e58 * _e59)));
    x2_ = _e62;
    let _e64 = y;
    let _e65 = y;
    let _e67 = l2_;
    y2_ = ((_e64 * _e65) * _e67);
    let _e70 = z;
    let _e71 = z;
    let _e73 = l2_;
    z2_ = ((_e70 * _e71) * _e73);
    _ = rr;
    let _e77 = rr;
    let _e79 = rr;
    let _e81 = rr;
    let _e83 = x2_;
    k_4 = (((sign(_e77) * _e79) * _e81) * _e83);
    _ = z;
    let _e87 = z;
    let _e89 = a2_;
    let _e91 = z2_;
    let _e93 = k_4;
    if (((sign(_e87) * _e89) * _e91) > _e93) {
        let _e95 = x2_;
        let _e96 = z2_;
        _ = (_e95 + _e96);
        let _e98 = x2_;
        let _e99 = z2_;
        let _e102 = il2_;
        let _e104 = r2_3;
        return ((sqrt((_e98 + _e99)) * _e102) - _e104);
    }
    _ = y;
    let _e107 = y;
    let _e109 = a2_;
    let _e111 = y2_;
    let _e113 = k_4;
    if (((sign(_e107) * _e109) * _e111) < _e113) {
        let _e115 = x2_;
        let _e116 = y2_;
        _ = (_e115 + _e116);
        let _e118 = x2_;
        let _e119 = y2_;
        let _e122 = il2_;
        let _e124 = r1_3;
        return ((sqrt((_e118 + _e119)) * _e122) - _e124);
    }
    let _e126 = x2_;
    let _e127 = a2_;
    let _e129 = il2_;
    _ = ((_e126 * _e127) * _e129);
    let _e131 = x2_;
    let _e132 = a2_;
    let _e134 = il2_;
    let _e137 = y;
    let _e138 = rr;
    let _e141 = il2_;
    let _e143 = r1_3;
    return (((sqrt(((_e131 * _e132) * _e134)) + (_e137 * _e138)) * _e141) - _e143);
}

fn sdTriPrism(p_24: vec3<f32>, h_7: vec2<f32>) -> f32 {
    var p_25: vec3<f32>;
    var h_8: vec2<f32>;
    var k_5: f32;
    var d1_: f32;
    var d2_: f32;

    p_25 = p_24;
    h_8 = h_7;
    k_5 = sqrt(3.0);
    let _e9 = h_8;
    let _e12 = k_5;
    h_8.x = (_e9.x * (0.5 * _e12));
    let _e15 = p_25;
    _ = _e15.xy;
    let _e17 = p_25;
    let _e19 = h_8;
    let _e22 = (_e17.xy / vec2<f32>(_e19.x));
    p_25.x = _e22.x;
    p_25.y = _e22.y;
    let _e28 = p_25;
    _ = _e28.x;
    let _e30 = p_25;
    p_25.x = (abs(_e30.x) - 1.0);
    let _e36 = p_25;
    let _e39 = k_5;
    p_25.y = (_e36.y + (1.0 / _e39));
    let _e42 = p_25;
    let _e44 = k_5;
    let _e45 = p_25;
    if ((_e42.x + (_e44 * _e45.y)) > 0.0) {
        let _e51 = p_25;
        _ = _e51.xy;
        let _e53 = p_25;
        let _e55 = k_5;
        let _e56 = p_25;
        let _e60 = k_5;
        let _e62 = p_25;
        let _e65 = p_25;
        let _e71 = (vec2<f32>((_e53.x - (_e55 * _e56.y)), ((-(_e60) * _e62.x) - _e65.y)) / vec2<f32>(2.0));
        p_25.x = _e71.x;
        p_25.y = _e71.y;
    }
    let _e77 = p_25;
    let _e79 = p_25;
    _ = _e79.x;
    _ = -(2.0);
    let _e84 = p_25;
    p_25.x = (_e77.x - clamp(_e84.x, -(2.0), 0.0));
    let _e91 = p_25;
    _ = _e91.xy;
    let _e93 = p_25;
    let _e96 = p_25;
    _ = -(_e96.y);
    let _e99 = p_25;
    let _e104 = h_8;
    d1_ = ((length(_e93.xy) * sign(-(_e99.y))) * _e104.x);
    let _e108 = p_25;
    _ = _e108.z;
    let _e110 = p_25;
    let _e113 = h_8;
    d2_ = (abs(_e110.z) - _e113.y);
    let _e117 = d1_;
    let _e118 = d2_;
    _ = vec2<f32>(_e117, _e118);
    let _e121 = d1_;
    let _e122 = d2_;
    _ = max(vec2<f32>(_e121, _e122), vec2<f32>(0.0));
    let _e127 = d1_;
    let _e128 = d2_;
    _ = vec2<f32>(_e127, _e128);
    let _e131 = d1_;
    let _e132 = d2_;
    _ = d1_;
    _ = d2_;
    let _e140 = d1_;
    let _e141 = d2_;
    _ = max(_e140, _e141);
    _ = d1_;
    _ = d2_;
    let _e146 = d1_;
    let _e147 = d2_;
    return (length(max(vec2<f32>(_e131, _e132), vec2<f32>(0.0))) + min(max(_e146, _e147), 0.0));
}

fn sdCylinder(p_26: vec3<f32>, h_9: vec2<f32>) -> f32 {
    var p_27: vec3<f32>;
    var h_10: vec2<f32>;
    var d_3: vec2<f32>;

    p_27 = p_26;
    h_10 = h_9;
    let _e4 = p_27;
    _ = _e4.xz;
    let _e6 = p_27;
    let _e9 = p_27;
    _ = vec2<f32>(length(_e6.xz), _e9.y);
    let _e12 = p_27;
    _ = _e12.xz;
    let _e14 = p_27;
    let _e17 = p_27;
    let _e21 = h_10;
    d_3 = (abs(vec2<f32>(length(_e14.xz), _e17.y)) - _e21);
    let _e24 = d_3;
    _ = _e24.x;
    let _e26 = d_3;
    _ = _e26.y;
    let _e28 = d_3;
    let _e30 = d_3;
    _ = max(_e28.x, _e30.y);
    let _e34 = d_3;
    _ = _e34.x;
    let _e36 = d_3;
    _ = _e36.y;
    let _e38 = d_3;
    let _e40 = d_3;
    _ = d_3;
    let _e47 = d_3;
    _ = max(_e47, vec2<f32>(0.0));
    _ = d_3;
    let _e53 = d_3;
    return (min(max(_e38.x, _e40.y), 0.0) + length(max(_e53, vec2<f32>(0.0))));
}

fn sdCylinder_1(p_28: vec3<f32>, a_7: vec3<f32>, b_11: vec3<f32>, r_6: f32) -> f32 {
    var p_29: vec3<f32>;
    var a_8: vec3<f32>;
    var b_12: vec3<f32>;
    var r_7: f32;
    var pa_2: vec3<f32>;
    var ba_2: vec3<f32>;
    var baba: f32;
    var paba: f32;
    var x: f32;
    var y_1: f32;
    var x2_1: f32;
    var y2_1: f32;
    var local_1: f32;
    var local_2: f32;
    var local_3: f32;
    var d_4: f32;

    p_29 = p_28;
    a_8 = a_7;
    b_12 = b_11;
    r_7 = r_6;
    let _e8 = p_29;
    let _e9 = a_8;
    pa_2 = (_e8 - _e9);
    let _e12 = b_12;
    let _e13 = a_8;
    ba_2 = (_e12 - _e13);
    _ = ba_2;
    _ = ba_2;
    let _e18 = ba_2;
    let _e19 = ba_2;
    baba = dot(_e18, _e19);
    _ = pa_2;
    _ = ba_2;
    let _e24 = pa_2;
    let _e25 = ba_2;
    paba = dot(_e24, _e25);
    let _e28 = pa_2;
    let _e29 = baba;
    let _e31 = ba_2;
    let _e32 = paba;
    _ = ((_e28 * _e29) - (_e31 * _e32));
    let _e35 = pa_2;
    let _e36 = baba;
    let _e38 = ba_2;
    let _e39 = paba;
    let _e43 = r_7;
    let _e44 = baba;
    x = (length(((_e35 * _e36) - (_e38 * _e39))) - (_e43 * _e44));
    let _e48 = paba;
    let _e49 = baba;
    _ = (_e48 - (_e49 * 0.5));
    let _e53 = paba;
    let _e54 = baba;
    let _e59 = baba;
    y_1 = (abs((_e53 - (_e54 * 0.5))) - (_e59 * 0.5));
    let _e64 = x;
    let _e65 = x;
    x2_1 = (_e64 * _e65);
    let _e68 = y_1;
    let _e69 = y_1;
    let _e71 = baba;
    y2_1 = ((_e68 * _e69) * _e71);
    _ = x;
    _ = y_1;
    let _e76 = x;
    let _e77 = y_1;
    if (max(_e76, _e77) < 0.0) {
        _ = x2_1;
        _ = y2_1;
        let _e83 = x2_1;
        let _e84 = y2_1;
        local_3 = -(min(_e83, _e84));
    } else {
        let _e87 = x;
        if (_e87 > 0.0) {
            let _e90 = x2_1;
            local_1 = _e90;
        } else {
            local_1 = 0.0;
        }
        let _e93 = local_1;
        let _e94 = y_1;
        if (_e94 > 0.0) {
            let _e97 = y2_1;
            local_2 = _e97;
        } else {
            local_2 = 0.0;
        }
        let _e100 = local_2;
        local_3 = (_e93 + _e100);
    }
    let _e103 = local_3;
    d_4 = _e103;
    _ = d_4;
    let _e106 = d_4;
    _ = d_4;
    let _e109 = d_4;
    _ = abs(_e109);
    _ = d_4;
    let _e112 = d_4;
    let _e116 = baba;
    return ((sign(_e106) * sqrt(abs(_e112))) / _e116);
}

fn sdCone(p_30: vec3<f32>, c: vec2<f32>, h_11: f32) -> f32 {
    var p_31: vec3<f32>;
    var c_1: vec2<f32>;
    var h_12: f32;
    var q_3: vec2<f32>;
    var w: vec2<f32>;
    var a_9: vec2<f32>;
    var b_13: vec2<f32>;
    var k_6: f32;
    var d_5: f32;
    var s_2: f32;

    p_31 = p_30;
    c_1 = c;
    h_12 = h_11;
    let _e6 = h_12;
    let _e7 = c_1;
    let _e9 = c_1;
    let _e14 = c_1;
    q_3 = ((_e6 * vec2<f32>(_e7.x, -(_e9.y))) / vec2<f32>(_e14.y));
    let _e19 = p_31;
    _ = _e19.xz;
    let _e21 = p_31;
    let _e24 = p_31;
    w = vec2<f32>(length(_e21.xz), _e24.y);
    let _e28 = w;
    let _e29 = q_3;
    _ = w;
    _ = q_3;
    let _e32 = w;
    let _e33 = q_3;
    _ = q_3;
    _ = q_3;
    let _e37 = q_3;
    let _e38 = q_3;
    _ = (dot(_e32, _e33) / dot(_e37, _e38));
    _ = w;
    _ = q_3;
    let _e45 = w;
    let _e46 = q_3;
    _ = q_3;
    _ = q_3;
    let _e50 = q_3;
    let _e51 = q_3;
    a_9 = (_e28 - (_e29 * clamp((dot(_e45, _e46) / dot(_e50, _e51)), 0.0, 1.0)));
    let _e60 = w;
    let _e61 = q_3;
    let _e62 = w;
    let _e64 = q_3;
    _ = (_e62.x / _e64.x);
    let _e69 = w;
    let _e71 = q_3;
    b_13 = (_e60 - (_e61 * vec2<f32>(clamp((_e69.x / _e71.x), 0.0, 1.0), 1.0)));
    let _e82 = q_3;
    _ = _e82.y;
    let _e84 = q_3;
    k_6 = sign(_e84.y);
    _ = a_9;
    _ = a_9;
    let _e90 = a_9;
    let _e91 = a_9;
    _ = dot(_e90, _e91);
    _ = b_13;
    _ = b_13;
    let _e95 = b_13;
    let _e96 = b_13;
    _ = dot(_e95, _e96);
    _ = a_9;
    _ = a_9;
    let _e100 = a_9;
    let _e101 = a_9;
    _ = b_13;
    _ = b_13;
    let _e105 = b_13;
    let _e106 = b_13;
    d_5 = min(dot(_e100, _e101), dot(_e105, _e106));
    let _e110 = k_6;
    let _e111 = w;
    let _e113 = q_3;
    let _e116 = w;
    let _e118 = q_3;
    _ = (_e110 * ((_e111.x * _e113.y) - (_e116.y * _e118.x)));
    let _e123 = k_6;
    let _e124 = w;
    let _e126 = q_3;
    _ = (_e123 * (_e124.y - _e126.y));
    let _e130 = k_6;
    let _e131 = w;
    let _e133 = q_3;
    let _e136 = w;
    let _e138 = q_3;
    let _e143 = k_6;
    let _e144 = w;
    let _e146 = q_3;
    s_2 = max((_e130 * ((_e131.x * _e133.y) - (_e136.y * _e138.x))), (_e143 * (_e144.y - _e146.y)));
    _ = d_5;
    let _e153 = d_5;
    _ = s_2;
    let _e156 = s_2;
    return (sqrt(_e153) * sign(_e156));
}

fn sdCappedCone(p_32: vec3<f32>, h_13: f32, r1_4: f32, r2_4: f32) -> f32 {
    var p_33: vec3<f32>;
    var h_14: f32;
    var r1_5: f32;
    var r2_5: f32;
    var q_4: vec2<f32>;
    var k1_1: vec2<f32>;
    var k2_: vec2<f32>;
    var local_4: f32;
    var local_5: f32;
    var ca: vec2<f32>;
    var cb: vec2<f32>;
    var local_6: f32;
    var s_3: f32;

    p_33 = p_32;
    h_14 = h_13;
    r1_5 = r1_4;
    r2_5 = r2_4;
    let _e8 = p_33;
    _ = _e8.xz;
    let _e10 = p_33;
    let _e13 = p_33;
    q_4 = vec2<f32>(length(_e10.xz), _e13.y);
    let _e17 = r2_5;
    let _e18 = h_14;
    k1_1 = vec2<f32>(_e17, _e18);
    let _e21 = r2_5;
    let _e22 = r1_5;
    let _e25 = h_14;
    k2_ = vec2<f32>((_e21 - _e22), (2.0 * _e25));
    let _e29 = q_4;
    let _e31 = q_4;
    _ = _e31.x;
    let _e33 = q_4;
    if (_e33.y < 0.0) {
        let _e37 = r1_5;
        local_4 = _e37;
    } else {
        let _e38 = r2_5;
        local_4 = _e38;
    }
    _ = local_4;
    let _e41 = q_4;
    let _e43 = q_4;
    if (_e43.y < 0.0) {
        let _e47 = r1_5;
        local_5 = _e47;
    } else {
        let _e48 = r2_5;
        local_5 = _e48;
    }
    let _e50 = local_5;
    let _e53 = q_4;
    _ = _e53.y;
    let _e55 = q_4;
    let _e58 = h_14;
    ca = vec2<f32>((_e29.x - min(_e41.x, _e50)), (abs(_e55.y) - _e58));
    let _e62 = q_4;
    let _e63 = k1_1;
    let _e65 = k2_;
    let _e66 = k1_1;
    let _e67 = q_4;
    _ = (_e66 - _e67);
    _ = k2_;
    let _e70 = k1_1;
    let _e71 = q_4;
    let _e73 = k2_;
    _ = k2_;
    let _e76 = k2_;
    let _e77 = dot2_(_e76);
    _ = (dot((_e70 - _e71), _e73) / _e77);
    let _e81 = k1_1;
    let _e82 = q_4;
    _ = (_e81 - _e82);
    _ = k2_;
    let _e85 = k1_1;
    let _e86 = q_4;
    let _e88 = k2_;
    _ = k2_;
    let _e91 = k2_;
    let _e92 = dot2_(_e91);
    cb = ((_e62 - _e63) + (_e65 * clamp((dot((_e85 - _e86), _e88) / _e92), 0.0, 1.0)));
    let _e100 = cb;
    let _e104 = ca;
    if ((_e100.x < 0.0) && (_e104.y < 0.0)) {
        local_6 = -(1.0);
    } else {
        local_6 = 1.0;
    }
    let _e113 = local_6;
    s_3 = _e113;
    let _e115 = s_3;
    _ = ca;
    let _e117 = ca;
    let _e118 = dot2_(_e117);
    _ = cb;
    let _e120 = cb;
    let _e121 = dot2_(_e120);
    _ = ca;
    let _e123 = ca;
    let _e124 = dot2_(_e123);
    _ = cb;
    let _e126 = cb;
    let _e127 = dot2_(_e126);
    _ = min(_e124, _e127);
    _ = ca;
    let _e130 = ca;
    let _e131 = dot2_(_e130);
    _ = cb;
    let _e133 = cb;
    let _e134 = dot2_(_e133);
    _ = ca;
    let _e136 = ca;
    let _e137 = dot2_(_e136);
    _ = cb;
    let _e139 = cb;
    let _e140 = dot2_(_e139);
    return (_e115 * sqrt(min(_e137, _e140)));
}

fn sdCappedCone_1(p_34: vec3<f32>, a_10: vec3<f32>, b_14: vec3<f32>, ra_2: f32, rb_2: f32) -> f32 {
    var p_35: vec3<f32>;
    var a_11: vec3<f32>;
    var b_15: vec3<f32>;
    var ra_3: f32;
    var rb_3: f32;
    var rba: f32;
    var baba_1: f32;
    var papa: f32;
    var paba_1: f32;
    var x_1: f32;
    var local_7: f32;
    var local_8: f32;
    var cax: f32;
    var cay: f32;
    var k_7: f32;
    var f: f32;
    var cbx: f32;
    var cby: f32;
    var local_9: f32;
    var s_4: f32;

    p_35 = p_34;
    a_11 = a_10;
    b_15 = b_14;
    ra_3 = ra_2;
    rb_3 = rb_2;
    let _e10 = rb_3;
    let _e11 = ra_3;
    rba = (_e10 - _e11);
    let _e14 = b_15;
    let _e15 = a_11;
    _ = (_e14 - _e15);
    let _e17 = b_15;
    let _e18 = a_11;
    _ = (_e17 - _e18);
    let _e20 = b_15;
    let _e21 = a_11;
    let _e23 = b_15;
    let _e24 = a_11;
    baba_1 = dot((_e20 - _e21), (_e23 - _e24));
    let _e28 = p_35;
    let _e29 = a_11;
    _ = (_e28 - _e29);
    let _e31 = p_35;
    let _e32 = a_11;
    _ = (_e31 - _e32);
    let _e34 = p_35;
    let _e35 = a_11;
    let _e37 = p_35;
    let _e38 = a_11;
    papa = dot((_e34 - _e35), (_e37 - _e38));
    let _e42 = p_35;
    let _e43 = a_11;
    _ = (_e42 - _e43);
    let _e45 = b_15;
    let _e46 = a_11;
    _ = (_e45 - _e46);
    let _e48 = p_35;
    let _e49 = a_11;
    let _e51 = b_15;
    let _e52 = a_11;
    let _e55 = baba_1;
    paba_1 = (dot((_e48 - _e49), (_e51 - _e52)) / _e55);
    let _e58 = papa;
    let _e59 = paba_1;
    let _e60 = paba_1;
    let _e62 = baba_1;
    _ = (_e58 - ((_e59 * _e60) * _e62));
    let _e65 = papa;
    let _e66 = paba_1;
    let _e67 = paba_1;
    let _e69 = baba_1;
    x_1 = sqrt((_e65 - ((_e66 * _e67) * _e69)));
    let _e75 = x_1;
    let _e76 = paba_1;
    if (_e76 < 0.5) {
        let _e79 = ra_3;
        local_7 = _e79;
    } else {
        let _e80 = rb_3;
        local_7 = _e80;
    }
    let _e82 = local_7;
    _ = (_e75 - _e82);
    let _e85 = x_1;
    let _e86 = paba_1;
    if (_e86 < 0.5) {
        let _e89 = ra_3;
        local_8 = _e89;
    } else {
        let _e90 = rb_3;
        local_8 = _e90;
    }
    let _e92 = local_8;
    cax = max(0.0, (_e85 - _e92));
    let _e96 = paba_1;
    _ = (_e96 - 0.5);
    let _e99 = paba_1;
    cay = (abs((_e99 - 0.5)) - 0.5);
    let _e106 = rba;
    let _e107 = rba;
    let _e109 = baba_1;
    k_7 = ((_e106 * _e107) + _e109);
    let _e112 = rba;
    let _e113 = x_1;
    let _e114 = ra_3;
    let _e117 = paba_1;
    let _e118 = baba_1;
    let _e121 = k_7;
    _ = (((_e112 * (_e113 - _e114)) + (_e117 * _e118)) / _e121);
    let _e125 = rba;
    let _e126 = x_1;
    let _e127 = ra_3;
    let _e130 = paba_1;
    let _e131 = baba_1;
    let _e134 = k_7;
    f = clamp((((_e125 * (_e126 - _e127)) + (_e130 * _e131)) / _e134), 0.0, 1.0);
    let _e140 = x_1;
    let _e141 = ra_3;
    let _e143 = f;
    let _e144 = rba;
    cbx = ((_e140 - _e141) - (_e143 * _e144));
    let _e148 = paba_1;
    let _e149 = f;
    cby = (_e148 - _e149);
    let _e152 = cbx;
    let _e155 = cay;
    if ((_e152 < 0.0) && (_e155 < 0.0)) {
        local_9 = -(1.0);
    } else {
        local_9 = 1.0;
    }
    let _e163 = local_9;
    s_4 = _e163;
    let _e165 = s_4;
    let _e166 = cax;
    let _e167 = cax;
    let _e169 = cay;
    let _e170 = cay;
    let _e172 = baba_1;
    _ = ((_e166 * _e167) + ((_e169 * _e170) * _e172));
    let _e175 = cbx;
    let _e176 = cbx;
    let _e178 = cby;
    let _e179 = cby;
    let _e181 = baba_1;
    _ = ((_e175 * _e176) + ((_e178 * _e179) * _e181));
    let _e184 = cax;
    let _e185 = cax;
    let _e187 = cay;
    let _e188 = cay;
    let _e190 = baba_1;
    let _e193 = cbx;
    let _e194 = cbx;
    let _e196 = cby;
    let _e197 = cby;
    let _e199 = baba_1;
    _ = min(((_e184 * _e185) + ((_e187 * _e188) * _e190)), ((_e193 * _e194) + ((_e196 * _e197) * _e199)));
    let _e203 = cax;
    let _e204 = cax;
    let _e206 = cay;
    let _e207 = cay;
    let _e209 = baba_1;
    _ = ((_e203 * _e204) + ((_e206 * _e207) * _e209));
    let _e212 = cbx;
    let _e213 = cbx;
    let _e215 = cby;
    let _e216 = cby;
    let _e218 = baba_1;
    _ = ((_e212 * _e213) + ((_e215 * _e216) * _e218));
    let _e221 = cax;
    let _e222 = cax;
    let _e224 = cay;
    let _e225 = cay;
    let _e227 = baba_1;
    let _e230 = cbx;
    let _e231 = cbx;
    let _e233 = cby;
    let _e234 = cby;
    let _e236 = baba_1;
    return (_e165 * sqrt(min(((_e221 * _e222) + ((_e224 * _e225) * _e227)), ((_e230 * _e231) + ((_e233 * _e234) * _e236)))));
}

fn sdSolidAngle(pos: vec3<f32>, c_2: vec2<f32>, ra_4: f32) -> f32 {
    var pos_1: vec3<f32>;
    var c_3: vec2<f32>;
    var ra_5: f32;
    var p_36: vec2<f32>;
    var l: f32;
    var m: f32;

    pos_1 = pos;
    c_3 = c_2;
    ra_5 = ra_4;
    let _e6 = pos_1;
    _ = _e6.xz;
    let _e8 = pos_1;
    let _e11 = pos_1;
    p_36 = vec2<f32>(length(_e8.xz), _e11.y);
    _ = p_36;
    let _e16 = p_36;
    let _e18 = ra_5;
    l = (length(_e16) - _e18);
    let _e21 = p_36;
    let _e22 = c_3;
    _ = p_36;
    _ = c_3;
    let _e25 = p_36;
    let _e26 = c_3;
    _ = dot(_e25, _e26);
    _ = ra_5;
    _ = p_36;
    _ = c_3;
    let _e32 = p_36;
    let _e33 = c_3;
    let _e36 = ra_5;
    _ = (_e21 - (_e22 * clamp(dot(_e32, _e33), 0.0, _e36)));
    let _e40 = p_36;
    let _e41 = c_3;
    _ = p_36;
    _ = c_3;
    let _e44 = p_36;
    let _e45 = c_3;
    _ = dot(_e44, _e45);
    _ = ra_5;
    _ = p_36;
    _ = c_3;
    let _e51 = p_36;
    let _e52 = c_3;
    let _e55 = ra_5;
    m = length((_e40 - (_e41 * clamp(dot(_e51, _e52), 0.0, _e55))));
    _ = l;
    let _e62 = m;
    let _e63 = c_3;
    let _e65 = p_36;
    let _e68 = c_3;
    let _e70 = p_36;
    _ = ((_e63.y * _e65.x) - (_e68.x * _e70.y));
    let _e74 = c_3;
    let _e76 = p_36;
    let _e79 = c_3;
    let _e81 = p_36;
    _ = (_e62 * sign(((_e74.y * _e76.x) - (_e79.x * _e81.y))));
    let _e87 = l;
    let _e88 = m;
    let _e89 = c_3;
    let _e91 = p_36;
    let _e94 = c_3;
    let _e96 = p_36;
    _ = ((_e89.y * _e91.x) - (_e94.x * _e96.y));
    let _e100 = c_3;
    let _e102 = p_36;
    let _e105 = c_3;
    let _e107 = p_36;
    return max(_e87, (_e88 * sign(((_e100.y * _e102.x) - (_e105.x * _e107.y)))));
}

fn sdOctahedron(p_37: vec3<f32>, s_5: f32) -> f32 {
    var p_38: vec3<f32>;
    var s_6: f32;
    var m_1: f32;
    var q_5: vec3<f32>;
    var k_8: f32;

    p_38 = p_37;
    s_6 = s_5;
    _ = p_38;
    let _e5 = p_38;
    p_38 = abs(_e5);
    let _e7 = p_38;
    let _e9 = p_38;
    let _e12 = p_38;
    let _e15 = s_6;
    m_1 = (((_e7.x + _e9.y) + _e12.z) - _e15);
    let _e20 = p_38;
    let _e23 = m_1;
    if ((3.0 * _e20.x) < _e23) {
        let _e25 = p_38;
        q_5 = _e25.xyz;
    } else {
        let _e28 = p_38;
        let _e31 = m_1;
        if ((3.0 * _e28.y) < _e31) {
            let _e33 = p_38;
            q_5 = _e33.yzx;
        } else {
            let _e36 = p_38;
            let _e39 = m_1;
            if ((3.0 * _e36.z) < _e39) {
                let _e41 = p_38;
                q_5 = _e41.zxy;
            } else {
                let _e43 = m_1;
                return (_e43 * 0.5773502588272095);
            }
        }
    }
    let _e47 = q_5;
    let _e49 = q_5;
    let _e52 = s_6;
    _ = (0.5 * ((_e47.z - _e49.y) + _e52));
    _ = s_6;
    let _e58 = q_5;
    let _e60 = q_5;
    let _e63 = s_6;
    let _e67 = s_6;
    k_8 = clamp((0.5 * ((_e58.z - _e60.y) + _e63)), 0.0, _e67);
    let _e70 = q_5;
    let _e72 = q_5;
    let _e74 = s_6;
    let _e76 = k_8;
    let _e78 = q_5;
    let _e80 = k_8;
    _ = vec3<f32>(_e70.x, ((_e72.y - _e74) + _e76), (_e78.z - _e80));
    let _e83 = q_5;
    let _e85 = q_5;
    let _e87 = s_6;
    let _e89 = k_8;
    let _e91 = q_5;
    let _e93 = k_8;
    return length(vec3<f32>(_e83.x, ((_e85.y - _e87) + _e89), (_e91.z - _e93)));
}

fn sdPyramid(p_39: vec3<f32>, h_15: f32) -> f32 {
    var p_40: vec3<f32>;
    var h_16: f32;
    var m2_: f32;
    var local_10: vec2<f32>;
    var q_6: vec3<f32>;
    var s_7: f32;
    var t_2: f32;
    var a_12: f32;
    var b_16: f32;
    var local_11: f32;
    var d2_1: f32;

    p_40 = p_39;
    h_16 = h_15;
    let _e4 = h_16;
    let _e5 = h_16;
    m2_ = ((_e4 * _e5) + 0.25);
    let _e10 = p_40;
    _ = _e10.xz;
    let _e12 = p_40;
    _ = _e12.xz;
    let _e14 = p_40;
    let _e16 = abs(_e14.xz);
    p_40.x = _e16.x;
    p_40.z = _e16.y;
    let _e21 = p_40;
    _ = _e21.xz;
    let _e23 = p_40;
    let _e25 = p_40;
    if (_e23.z > _e25.x) {
        let _e28 = p_40;
        local_10 = _e28.zx;
    } else {
        let _e30 = p_40;
        local_10 = _e30.xz;
    }
    let _e33 = local_10;
    p_40.x = _e33.x;
    p_40.z = _e33.y;
    let _e38 = p_40;
    _ = _e38.xz;
    let _e40 = p_40;
    let _e44 = (_e40.xz - vec2<f32>(0.5));
    p_40.x = _e44.x;
    p_40.z = _e44.y;
    let _e49 = p_40;
    let _e51 = h_16;
    let _e52 = p_40;
    let _e56 = p_40;
    let _e60 = h_16;
    let _e61 = p_40;
    let _e65 = p_40;
    q_6 = vec3<f32>(_e49.z, ((_e51 * _e52.y) - (0.5 * _e56.x)), ((_e60 * _e61.x) + (0.5 * _e65.y)));
    let _e71 = q_6;
    _ = -(_e71.x);
    let _e75 = q_6;
    s_7 = max(-(_e75.x), 0.0);
    let _e81 = q_6;
    let _e84 = p_40;
    let _e88 = m2_;
    _ = ((_e81.y - (0.5 * _e84.z)) / (_e88 + 0.25));
    let _e94 = q_6;
    let _e97 = p_40;
    let _e101 = m2_;
    t_2 = clamp(((_e94.y - (0.5 * _e97.z)) / (_e101 + 0.25)), 0.0, 1.0);
    let _e109 = m2_;
    let _e110 = q_6;
    let _e112 = s_7;
    let _e115 = q_6;
    let _e117 = s_7;
    let _e120 = q_6;
    let _e122 = q_6;
    a_12 = (((_e109 * (_e110.x + _e112)) * (_e115.x + _e117)) + (_e120.y * _e122.y));
    let _e127 = m2_;
    let _e128 = q_6;
    let _e131 = t_2;
    let _e135 = q_6;
    let _e138 = t_2;
    let _e142 = q_6;
    let _e144 = m2_;
    let _e145 = t_2;
    let _e148 = q_6;
    let _e150 = m2_;
    let _e151 = t_2;
    b_16 = (((_e127 * (_e128.x + (0.5 * _e131))) * (_e135.x + (0.5 * _e138))) + ((_e142.y - (_e144 * _e145)) * (_e148.y - (_e150 * _e151))));
    let _e157 = q_6;
    _ = _e157.y;
    let _e159 = q_6;
    let _e162 = m2_;
    let _e164 = q_6;
    _ = ((-(_e159.x) * _e162) - (_e164.y * 0.5));
    let _e169 = q_6;
    let _e171 = q_6;
    let _e174 = m2_;
    let _e176 = q_6;
    if (min(_e169.y, ((-(_e171.x) * _e174) - (_e176.y * 0.5))) > 0.0) {
        local_11 = 0.0;
    } else {
        _ = a_12;
        _ = b_16;
        let _e187 = a_12;
        let _e188 = b_16;
        local_11 = min(_e187, _e188);
    }
    let _e191 = local_11;
    d2_1 = _e191;
    let _e193 = d2_1;
    let _e194 = q_6;
    let _e196 = q_6;
    let _e200 = m2_;
    _ = ((_e193 + (_e194.z * _e196.z)) / _e200);
    let _e202 = d2_1;
    let _e203 = q_6;
    let _e205 = q_6;
    let _e209 = m2_;
    let _e212 = q_6;
    _ = _e212.z;
    let _e214 = p_40;
    _ = -(_e214.y);
    let _e217 = q_6;
    let _e219 = p_40;
    _ = max(_e217.z, -(_e219.y));
    let _e223 = q_6;
    _ = _e223.z;
    let _e225 = p_40;
    _ = -(_e225.y);
    let _e228 = q_6;
    let _e230 = p_40;
    return (sqrt(((_e202 + (_e203.z * _e205.z)) / _e209)) * sign(max(_e228.z, -(_e230.y))));
}

fn sdRhombus(p_41: vec3<f32>, la: f32, lb: f32, h_17: f32, ra_6: f32) -> f32 {
    var p_42: vec3<f32>;
    var la_1: f32;
    var lb_1: f32;
    var h_18: f32;
    var ra_7: f32;
    var b_17: vec2<f32>;
    var f_1: f32;
    var q_7: vec2<f32>;

    p_42 = p_41;
    la_1 = la;
    lb_1 = lb;
    h_18 = h_17;
    ra_7 = ra_6;
    _ = p_42;
    let _e11 = p_42;
    p_42 = abs(_e11);
    let _e13 = la_1;
    let _e14 = lb_1;
    b_17 = vec2<f32>(_e13, _e14);
    _ = b_17;
    let _e18 = b_17;
    let _e20 = p_42;
    _ = (_e18 - (2.0 * _e20.xz));
    let _e24 = b_17;
    let _e25 = b_17;
    let _e27 = p_42;
    let _e31 = ndot(_e24, (_e25 - (2.0 * _e27.xz)));
    _ = b_17;
    _ = b_17;
    let _e34 = b_17;
    let _e35 = b_17;
    _ = (_e31 / dot(_e34, _e35));
    _ = -(1.0);
    _ = b_17;
    let _e42 = b_17;
    let _e44 = p_42;
    _ = (_e42 - (2.0 * _e44.xz));
    let _e48 = b_17;
    let _e49 = b_17;
    let _e51 = p_42;
    let _e55 = ndot(_e48, (_e49 - (2.0 * _e51.xz)));
    _ = b_17;
    _ = b_17;
    let _e58 = b_17;
    let _e59 = b_17;
    f_1 = clamp((_e55 / dot(_e58, _e59)), -(1.0), 1.0);
    let _e67 = p_42;
    let _e70 = b_17;
    let _e73 = f_1;
    let _e76 = f_1;
    _ = (_e67.xz - ((0.5 * _e70) * vec2<f32>((1.0 - _e73), (1.0 + _e76))));
    let _e81 = p_42;
    let _e84 = b_17;
    let _e87 = f_1;
    let _e90 = f_1;
    let _e96 = p_42;
    let _e98 = b_17;
    let _e101 = p_42;
    let _e103 = b_17;
    let _e107 = b_17;
    let _e109 = b_17;
    _ = (((_e96.x * _e98.y) + (_e101.z * _e103.x)) - (_e107.x * _e109.y));
    let _e113 = p_42;
    let _e115 = b_17;
    let _e118 = p_42;
    let _e120 = b_17;
    let _e124 = b_17;
    let _e126 = b_17;
    let _e132 = ra_7;
    let _e134 = p_42;
    let _e136 = h_18;
    q_7 = vec2<f32>(((length((_e81.xz - ((0.5 * _e84) * vec2<f32>((1.0 - _e87), (1.0 + _e90))))) * sign((((_e113.x * _e115.y) + (_e118.z * _e120.x)) - (_e124.x * _e126.y)))) - _e132), (_e134.y - _e136));
    let _e140 = q_7;
    _ = _e140.x;
    let _e142 = q_7;
    _ = _e142.y;
    let _e144 = q_7;
    let _e146 = q_7;
    _ = max(_e144.x, _e146.y);
    let _e150 = q_7;
    _ = _e150.x;
    let _e152 = q_7;
    _ = _e152.y;
    let _e154 = q_7;
    let _e156 = q_7;
    _ = q_7;
    let _e163 = q_7;
    _ = max(_e163, vec2<f32>(0.0));
    _ = q_7;
    let _e169 = q_7;
    return (min(max(_e154.x, _e156.y), 0.0) + length(max(_e169, vec2<f32>(0.0))));
}

fn sdHorseshoe(p_43: vec3<f32>, c_4: vec2<f32>, r_8: f32, le: f32, w_1: vec2<f32>) -> f32 {
    var p_44: vec3<f32>;
    var c_5: vec2<f32>;
    var r_9: f32;
    var le_1: f32;
    var w_2: vec2<f32>;
    var l_1: f32;
    var local_12: f32;
    var local_13: f32;
    var q_8: vec2<f32>;
    var d_6: vec2<f32>;

    p_44 = p_43;
    c_5 = c_4;
    r_9 = r_8;
    le_1 = le;
    w_2 = w_1;
    let _e11 = p_44;
    _ = _e11.x;
    let _e13 = p_44;
    p_44.x = abs(_e13.x);
    let _e16 = p_44;
    _ = _e16.xy;
    let _e18 = p_44;
    l_1 = length(_e18.xy);
    let _e22 = p_44;
    _ = _e22.xy;
    let _e24 = c_5;
    let _e27 = c_5;
    let _e29 = c_5;
    let _e31 = c_5;
    let _e36 = p_44;
    let _e38 = (mat2x2<f32>(vec2<f32>(-(_e24.x), _e27.y), vec2<f32>(_e29.y, _e31.x)) * _e36.xy);
    p_44.x = _e38.x;
    p_44.y = _e38.y;
    let _e43 = p_44;
    _ = _e43.xy;
    let _e45 = p_44;
    let _e49 = p_44;
    if ((_e45.y > 0.0) || (_e49.x > 0.0)) {
        let _e54 = p_44;
        local_12 = _e54.x;
    } else {
        let _e56 = l_1;
        let _e57 = c_5;
        _ = -(_e57.x);
        let _e60 = c_5;
        local_12 = (_e56 * sign(-(_e60.x)));
    }
    let _e66 = local_12;
    let _e67 = p_44;
    if (_e67.x > 0.0) {
        let _e71 = p_44;
        local_13 = _e71.y;
    } else {
        let _e73 = l_1;
        local_13 = _e73;
    }
    let _e75 = local_13;
    let _e76 = vec2<f32>(_e66, _e75);
    p_44.x = _e76.x;
    p_44.y = _e76.y;
    let _e81 = p_44;
    _ = _e81.xy;
    let _e83 = p_44;
    let _e85 = p_44;
    let _e87 = r_9;
    _ = (_e85.y - _e87);
    let _e89 = p_44;
    let _e91 = r_9;
    let _e95 = le_1;
    let _e98 = (vec2<f32>(_e83.x, abs((_e89.y - _e91))) - vec2<f32>(_e95, 0.0));
    p_44.x = _e98.x;
    p_44.y = _e98.y;
    let _e103 = p_44;
    _ = _e103.xy;
    let _e106 = p_44;
    _ = max(_e106.xy, vec2<f32>(0.0));
    let _e111 = p_44;
    _ = _e111.xy;
    let _e114 = p_44;
    let _e121 = p_44;
    _ = _e121.x;
    let _e123 = p_44;
    _ = _e123.y;
    let _e125 = p_44;
    let _e127 = p_44;
    _ = max(_e125.x, _e127.y);
    let _e131 = p_44;
    _ = _e131.x;
    let _e133 = p_44;
    _ = _e133.y;
    let _e135 = p_44;
    let _e137 = p_44;
    let _e142 = p_44;
    q_8 = vec2<f32>((length(max(_e114.xy, vec2<f32>(0.0))) + min(0.0, max(_e135.x, _e137.y))), _e142.z);
    _ = q_8;
    let _e147 = q_8;
    let _e149 = w_2;
    d_6 = (abs(_e147) - _e149);
    let _e152 = d_6;
    _ = _e152.x;
    let _e154 = d_6;
    _ = _e154.y;
    let _e156 = d_6;
    let _e158 = d_6;
    _ = max(_e156.x, _e158.y);
    let _e162 = d_6;
    _ = _e162.x;
    let _e164 = d_6;
    _ = _e164.y;
    let _e166 = d_6;
    let _e168 = d_6;
    _ = d_6;
    let _e175 = d_6;
    _ = max(_e175, vec2<f32>(0.0));
    _ = d_6;
    let _e181 = d_6;
    return (min(max(_e166.x, _e168.y), 0.0) + length(max(_e181, vec2<f32>(0.0))));
}

fn sdU(p_45: vec3<f32>, r_10: f32, le_2: f32, w_3: vec2<f32>) -> f32 {
    var p_46: vec3<f32>;
    var r_11: f32;
    var le_3: f32;
    var w_4: vec2<f32>;
    var local_14: f32;
    var k_9: f32;
    var local_15: f32;
    var q_9: vec2<f32>;

    p_46 = p_45;
    r_11 = r_10;
    le_3 = le_2;
    w_4 = w_3;
    let _e9 = p_46;
    if (_e9.y > 0.0) {
        let _e13 = p_46;
        _ = _e13.x;
        let _e15 = p_46;
        local_14 = abs(_e15.x);
    } else {
        let _e18 = p_46;
        _ = _e18.xy;
        let _e20 = p_46;
        local_14 = length(_e20.xy);
    }
    let _e24 = local_14;
    p_46.x = _e24;
    let _e26 = p_46;
    let _e28 = r_11;
    _ = (_e26.x - _e28);
    let _e30 = p_46;
    let _e32 = r_11;
    p_46.x = abs((_e30.x - _e32));
    let _e36 = p_46;
    let _e38 = le_3;
    p_46.y = (_e36.y - _e38);
    let _e40 = p_46;
    _ = _e40.x;
    let _e42 = p_46;
    _ = _e42.y;
    let _e44 = p_46;
    let _e46 = p_46;
    k_9 = max(_e44.x, _e46.y);
    let _e50 = k_9;
    if (_e50 < 0.0) {
        let _e53 = k_9;
        local_15 = -(_e53);
    } else {
        let _e55 = p_46;
        _ = _e55.xy;
        let _e58 = p_46;
        _ = max(_e58.xy, vec2<f32>(0.0));
        let _e63 = p_46;
        _ = _e63.xy;
        let _e66 = p_46;
        local_15 = length(max(_e66.xy, vec2<f32>(0.0)));
    }
    let _e73 = local_15;
    let _e74 = p_46;
    _ = _e74.z;
    let _e76 = p_46;
    let _e80 = w_4;
    q_9 = (vec2<f32>(_e73, abs(_e76.z)) - _e80);
    _ = q_9;
    let _e85 = q_9;
    _ = max(_e85, vec2<f32>(0.0));
    _ = q_9;
    let _e91 = q_9;
    let _e96 = q_9;
    _ = _e96.x;
    let _e98 = q_9;
    _ = _e98.y;
    let _e100 = q_9;
    let _e102 = q_9;
    _ = max(_e100.x, _e102.y);
    let _e106 = q_9;
    _ = _e106.x;
    let _e108 = q_9;
    _ = _e108.y;
    let _e110 = q_9;
    let _e112 = q_9;
    return (length(max(_e91, vec2<f32>(0.0))) + min(max(_e110.x, _e112.y), 0.0));
}

fn opU(d1_1: vec2<f32>, d2_2: vec2<f32>) -> vec2<f32> {
    var d1_2: vec2<f32>;
    var d2_3: vec2<f32>;
    var local_16: vec2<f32>;

    d1_2 = d1_1;
    d2_3 = d2_2;
    let _e4 = d1_2;
    let _e6 = d2_3;
    if (_e4.x < _e6.x) {
        let _e9 = d1_2;
        local_16 = _e9;
    } else {
        let _e10 = d2_3;
        local_16 = _e10;
    }
    let _e12 = local_16;
    return _e12;
}

fn map(pos_2: vec3<f32>) -> vec2<f32> {
    var pos_3: vec3<f32>;
    var res: vec2<f32>;

    pos_3 = pos_2;
    let _e2 = pos_3;
    res = vec2<f32>(_e2.y, 0.0);
    let _e7 = pos_3;
    _ = (_e7 - vec3<f32>(-(2.0), 0.30000001192092896, 0.25));
    _ = vec3<f32>(0.30000001192092896, 0.30000001192092896, 1.0);
    let _e18 = pos_3;
    let _e29 = sdBox((_e18 - vec3<f32>(-(2.0), 0.30000001192092896, 0.25)), vec3<f32>(0.30000001192092896, 0.30000001192092896, 1.0));
    let _e30 = res;
    if (_e29 < _e30.x) {
        {
            _ = res;
            let _e34 = pos_3;
            _ = (_e34 - vec3<f32>(-(2.0), 0.25, 0.0));
            let _e42 = pos_3;
            let _e50 = sdSphere((_e42 - vec3<f32>(-(2.0), 0.25, 0.0)), 0.25);
            _ = vec2<f32>(_e50, 26.899999618530273);
            let _e53 = res;
            let _e54 = pos_3;
            _ = (_e54 - vec3<f32>(-(2.0), 0.25, 0.0));
            let _e62 = pos_3;
            let _e70 = sdSphere((_e62 - vec3<f32>(-(2.0), 0.25, 0.0)), 0.25);
            let _e73 = opU(_e53, vec2<f32>(_e70, 26.899999618530273));
            res = _e73;
            _ = res;
            let _e75 = pos_3;
            _ = (_e75 - vec3<f32>(-(2.0), 0.25, 1.0)).xzy;
            let _e87 = pos_3;
            let _e99 = sdRhombus((_e87 - vec3<f32>(-(2.0), 0.25, 1.0)).xzy, 0.15000000596046448, 0.25, 0.03999999910593033, 0.07999999821186066);
            _ = vec2<f32>(_e99, 17.0);
            let _e102 = res;
            let _e103 = pos_3;
            _ = (_e103 - vec3<f32>(-(2.0), 0.25, 1.0)).xzy;
            let _e115 = pos_3;
            let _e127 = sdRhombus((_e115 - vec3<f32>(-(2.0), 0.25, 1.0)).xzy, 0.15000000596046448, 0.25, 0.03999999910593033, 0.07999999821186066);
            let _e130 = opU(_e102, vec2<f32>(_e127, 17.0));
            res = _e130;
        }
    }
    let _e131 = pos_3;
    _ = (_e131 - vec3<f32>(0.0, 0.30000001192092896, -(1.0)));
    _ = vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5);
    let _e142 = pos_3;
    let _e153 = sdBox((_e142 - vec3<f32>(0.0, 0.30000001192092896, -(1.0))), vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5));
    let _e154 = res;
    if (_e153 < _e154.x) {
        {
            _ = res;
            let _e158 = pos_3;
            _ = ((_e158 - vec3<f32>(0.0, 0.30000001192092896, 1.0)) * vec3<f32>(f32(1), f32(-(1)), f32(1)));
            _ = vec2<f32>(0.8660249710083008, -(0.5));
            let _e179 = pos_3;
            let _e200 = sdCappedTorus(((_e179 - vec3<f32>(0.0, 0.30000001192092896, 1.0)) * vec3<f32>(f32(1), f32(-(1)), f32(1))), vec2<f32>(0.8660249710083008, -(0.5)), 0.25, 0.05000000074505806);
            _ = vec2<f32>(_e200, 25.0);
            let _e203 = res;
            let _e204 = pos_3;
            _ = ((_e204 - vec3<f32>(0.0, 0.30000001192092896, 1.0)) * vec3<f32>(f32(1), f32(-(1)), f32(1)));
            _ = vec2<f32>(0.8660249710083008, -(0.5));
            let _e225 = pos_3;
            let _e246 = sdCappedTorus(((_e225 - vec3<f32>(0.0, 0.30000001192092896, 1.0)) * vec3<f32>(f32(1), f32(-(1)), f32(1))), vec2<f32>(0.8660249710083008, -(0.5)), 0.25, 0.05000000074505806);
            let _e249 = opU(_e203, vec2<f32>(_e246, 25.0));
            res = _e249;
            _ = res;
            let _e251 = pos_3;
            _ = (_e251 - vec3<f32>(0.0, 0.25, 0.0));
            _ = vec3<f32>(0.30000001192092896, 0.25, 0.20000000298023224);
            let _e262 = pos_3;
            let _e273 = sdBoxFrame((_e262 - vec3<f32>(0.0, 0.25, 0.0)), vec3<f32>(0.30000001192092896, 0.25, 0.20000000298023224), 0.02500000037252903);
            _ = vec2<f32>(_e273, 16.899999618530273);
            let _e276 = res;
            let _e277 = pos_3;
            _ = (_e277 - vec3<f32>(0.0, 0.25, 0.0));
            _ = vec3<f32>(0.30000001192092896, 0.25, 0.20000000298023224);
            let _e288 = pos_3;
            let _e299 = sdBoxFrame((_e288 - vec3<f32>(0.0, 0.25, 0.0)), vec3<f32>(0.30000001192092896, 0.25, 0.20000000298023224), 0.02500000037252903);
            let _e302 = opU(_e276, vec2<f32>(_e299, 16.899999618530273));
            res = _e302;
            _ = res;
            let _e304 = pos_3;
            _ = (_e304 - vec3<f32>(0.0, 0.44999998807907104, -(1.0)));
            _ = vec2<f32>(0.6000000238418579, 0.800000011920929);
            let _e315 = pos_3;
            let _e326 = sdCone((_e315 - vec3<f32>(0.0, 0.44999998807907104, -(1.0))), vec2<f32>(0.6000000238418579, 0.800000011920929), 0.44999998807907104);
            _ = vec2<f32>(_e326, 55.0);
            let _e329 = res;
            let _e330 = pos_3;
            _ = (_e330 - vec3<f32>(0.0, 0.44999998807907104, -(1.0)));
            _ = vec2<f32>(0.6000000238418579, 0.800000011920929);
            let _e341 = pos_3;
            let _e352 = sdCone((_e341 - vec3<f32>(0.0, 0.44999998807907104, -(1.0))), vec2<f32>(0.6000000238418579, 0.800000011920929), 0.44999998807907104);
            let _e355 = opU(_e329, vec2<f32>(_e352, 55.0));
            res = _e355;
            _ = res;
            let _e357 = pos_3;
            _ = (_e357 - vec3<f32>(0.0, 0.25, -(2.0)));
            let _e367 = pos_3;
            let _e377 = sdCappedCone((_e367 - vec3<f32>(0.0, 0.25, -(2.0))), 0.25, 0.25, 0.10000000149011612);
            _ = vec2<f32>(_e377, 13.670000076293945);
            let _e380 = res;
            let _e381 = pos_3;
            _ = (_e381 - vec3<f32>(0.0, 0.25, -(2.0)));
            let _e391 = pos_3;
            let _e401 = sdCappedCone((_e391 - vec3<f32>(0.0, 0.25, -(2.0))), 0.25, 0.25, 0.10000000149011612);
            let _e404 = opU(_e380, vec2<f32>(_e401, 13.670000076293945));
            res = _e404;
            _ = res;
            let _e406 = pos_3;
            _ = (_e406 - vec3<f32>(0.0, 0.0, -(3.0)));
            _ = (vec2<f32>(f32(3), f32(4)) / vec2<f32>(5.0));
            let _e422 = pos_3;
            let _e438 = sdSolidAngle((_e422 - vec3<f32>(0.0, 0.0, -(3.0))), (vec2<f32>(f32(3), f32(4)) / vec2<f32>(5.0)), 0.4000000059604645);
            _ = vec2<f32>(_e438, 49.130001068115234);
            let _e441 = res;
            let _e442 = pos_3;
            _ = (_e442 - vec3<f32>(0.0, 0.0, -(3.0)));
            _ = (vec2<f32>(f32(3), f32(4)) / vec2<f32>(5.0));
            let _e458 = pos_3;
            let _e474 = sdSolidAngle((_e458 - vec3<f32>(0.0, 0.0, -(3.0))), (vec2<f32>(f32(3), f32(4)) / vec2<f32>(5.0)), 0.4000000059604645);
            let _e477 = opU(_e441, vec2<f32>(_e474, 49.130001068115234));
            res = _e477;
        }
    }
    let _e478 = pos_3;
    _ = (_e478 - vec3<f32>(1.0, 0.30000001192092896, -(1.0)));
    _ = vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5);
    let _e489 = pos_3;
    let _e500 = sdBox((_e489 - vec3<f32>(1.0, 0.30000001192092896, -(1.0))), vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5));
    let _e501 = res;
    if (_e500 < _e501.x) {
        {
            _ = res;
            let _e505 = pos_3;
            _ = (_e505 - vec3<f32>(1.0, 0.30000001192092896, 1.0)).xzy;
            _ = vec2<f32>(0.25, 0.05000000074505806);
            let _e515 = pos_3;
            let _e525 = sdTorus((_e515 - vec3<f32>(1.0, 0.30000001192092896, 1.0)).xzy, vec2<f32>(0.25, 0.05000000074505806));
            _ = vec2<f32>(_e525, 7.099999904632568);
            let _e528 = res;
            let _e529 = pos_3;
            _ = (_e529 - vec3<f32>(1.0, 0.30000001192092896, 1.0)).xzy;
            _ = vec2<f32>(0.25, 0.05000000074505806);
            let _e539 = pos_3;
            let _e549 = sdTorus((_e539 - vec3<f32>(1.0, 0.30000001192092896, 1.0)).xzy, vec2<f32>(0.25, 0.05000000074505806));
            let _e552 = opU(_e528, vec2<f32>(_e549, 7.099999904632568));
            res = _e552;
            _ = res;
            let _e554 = pos_3;
            _ = (_e554 - vec3<f32>(1.0, 0.25, 0.0));
            _ = vec3<f32>(0.30000001192092896, 0.25, 0.10000000149011612);
            let _e564 = pos_3;
            let _e574 = sdBox((_e564 - vec3<f32>(1.0, 0.25, 0.0)), vec3<f32>(0.30000001192092896, 0.25, 0.10000000149011612));
            _ = vec2<f32>(_e574, 3.0);
            let _e577 = res;
            let _e578 = pos_3;
            _ = (_e578 - vec3<f32>(1.0, 0.25, 0.0));
            _ = vec3<f32>(0.30000001192092896, 0.25, 0.10000000149011612);
            let _e588 = pos_3;
            let _e598 = sdBox((_e588 - vec3<f32>(1.0, 0.25, 0.0)), vec3<f32>(0.30000001192092896, 0.25, 0.10000000149011612));
            let _e601 = opU(_e577, vec2<f32>(_e598, 3.0));
            res = _e601;
            _ = res;
            let _e603 = pos_3;
            _ = (_e603 - vec3<f32>(1.0, 0.0, -(1.0)));
            _ = vec3<f32>(-(0.10000000149011612), 0.10000000149011612, -(0.10000000149011612));
            _ = vec3<f32>(0.20000000298023224, 0.4000000059604645, 0.20000000298023224);
            let _e621 = pos_3;
            let _e639 = sdCapsule((_e621 - vec3<f32>(1.0, 0.0, -(1.0))), vec3<f32>(-(0.10000000149011612), 0.10000000149011612, -(0.10000000149011612)), vec3<f32>(0.20000000298023224, 0.4000000059604645, 0.20000000298023224), 0.10000000149011612);
            _ = vec2<f32>(_e639, 31.899999618530273);
            let _e642 = res;
            let _e643 = pos_3;
            _ = (_e643 - vec3<f32>(1.0, 0.0, -(1.0)));
            _ = vec3<f32>(-(0.10000000149011612), 0.10000000149011612, -(0.10000000149011612));
            _ = vec3<f32>(0.20000000298023224, 0.4000000059604645, 0.20000000298023224);
            let _e661 = pos_3;
            let _e679 = sdCapsule((_e661 - vec3<f32>(1.0, 0.0, -(1.0))), vec3<f32>(-(0.10000000149011612), 0.10000000149011612, -(0.10000000149011612)), vec3<f32>(0.20000000298023224, 0.4000000059604645, 0.20000000298023224), 0.10000000149011612);
            let _e682 = opU(_e642, vec2<f32>(_e679, 31.899999618530273));
            res = _e682;
            _ = res;
            let _e684 = pos_3;
            _ = (_e684 - vec3<f32>(1.0, 0.25, -(2.0)));
            _ = vec2<f32>(0.15000000596046448, 0.25);
            let _e694 = pos_3;
            let _e704 = sdCylinder((_e694 - vec3<f32>(1.0, 0.25, -(2.0))), vec2<f32>(0.15000000596046448, 0.25));
            _ = vec2<f32>(_e704, 8.0);
            let _e707 = res;
            let _e708 = pos_3;
            _ = (_e708 - vec3<f32>(1.0, 0.25, -(2.0)));
            _ = vec2<f32>(0.15000000596046448, 0.25);
            let _e718 = pos_3;
            let _e728 = sdCylinder((_e718 - vec3<f32>(1.0, 0.25, -(2.0))), vec2<f32>(0.15000000596046448, 0.25));
            let _e731 = opU(_e707, vec2<f32>(_e728, 8.0));
            res = _e731;
            _ = res;
            let _e733 = pos_3;
            _ = (_e733 - vec3<f32>(1.0, 0.20000000298023224, -(3.0)));
            _ = vec2<f32>(0.20000000298023224, 0.05000000074505806);
            let _e743 = pos_3;
            let _e753 = sdHexPrism((_e743 - vec3<f32>(1.0, 0.20000000298023224, -(3.0))), vec2<f32>(0.20000000298023224, 0.05000000074505806));
            _ = vec2<f32>(_e753, 18.399999618530273);
            let _e756 = res;
            let _e757 = pos_3;
            _ = (_e757 - vec3<f32>(1.0, 0.20000000298023224, -(3.0)));
            _ = vec2<f32>(0.20000000298023224, 0.05000000074505806);
            let _e767 = pos_3;
            let _e777 = sdHexPrism((_e767 - vec3<f32>(1.0, 0.20000000298023224, -(3.0))), vec2<f32>(0.20000000298023224, 0.05000000074505806));
            let _e780 = opU(_e756, vec2<f32>(_e777, 18.399999618530273));
            res = _e780;
        }
    }
    let _e781 = pos_3;
    _ = (_e781 - vec3<f32>(-(1.0), 0.3499999940395355, -(1.0)));
    _ = vec3<f32>(0.3499999940395355, 0.3499999940395355, 2.5);
    let _e793 = pos_3;
    let _e805 = sdBox((_e793 - vec3<f32>(-(1.0), 0.3499999940395355, -(1.0))), vec3<f32>(0.3499999940395355, 0.3499999940395355, 2.5));
    let _e806 = res;
    if (_e805 < _e806.x) {
        {
            _ = res;
            let _e810 = pos_3;
            _ = (_e810 - vec3<f32>(-(1.0), -(0.6000000238418579), -(3.0)));
            let _e820 = pos_3;
            let _e830 = sdPyramid((_e820 - vec3<f32>(-(1.0), -(0.6000000238418579), -(3.0))), 1.0);
            _ = vec2<f32>(_e830, 13.5600004196167);
            let _e833 = res;
            let _e834 = pos_3;
            _ = (_e834 - vec3<f32>(-(1.0), -(0.6000000238418579), -(3.0)));
            let _e844 = pos_3;
            let _e854 = sdPyramid((_e844 - vec3<f32>(-(1.0), -(0.6000000238418579), -(3.0))), 1.0);
            let _e857 = opU(_e833, vec2<f32>(_e854, 13.5600004196167));
            res = _e857;
            _ = res;
            let _e859 = pos_3;
            _ = (_e859 - vec3<f32>(-(1.0), 0.15000000596046448, -(2.0)));
            let _e868 = pos_3;
            let _e877 = sdOctahedron((_e868 - vec3<f32>(-(1.0), 0.15000000596046448, -(2.0))), 0.3499999940395355);
            _ = vec2<f32>(_e877, 23.559999465942383);
            let _e880 = res;
            let _e881 = pos_3;
            _ = (_e881 - vec3<f32>(-(1.0), 0.15000000596046448, -(2.0)));
            let _e890 = pos_3;
            let _e899 = sdOctahedron((_e890 - vec3<f32>(-(1.0), 0.15000000596046448, -(2.0))), 0.3499999940395355);
            let _e902 = opU(_e880, vec2<f32>(_e899, 23.559999465942383));
            res = _e902;
            _ = res;
            let _e904 = pos_3;
            _ = (_e904 - vec3<f32>(-(1.0), 0.15000000596046448, -(1.0)));
            _ = vec2<f32>(0.30000001192092896, 0.05000000074505806);
            let _e915 = pos_3;
            let _e926 = sdTriPrism((_e915 - vec3<f32>(-(1.0), 0.15000000596046448, -(1.0))), vec2<f32>(0.30000001192092896, 0.05000000074505806));
            _ = vec2<f32>(_e926, 43.5);
            let _e929 = res;
            let _e930 = pos_3;
            _ = (_e930 - vec3<f32>(-(1.0), 0.15000000596046448, -(1.0)));
            _ = vec2<f32>(0.30000001192092896, 0.05000000074505806);
            let _e941 = pos_3;
            let _e952 = sdTriPrism((_e941 - vec3<f32>(-(1.0), 0.15000000596046448, -(1.0))), vec2<f32>(0.30000001192092896, 0.05000000074505806));
            let _e955 = opU(_e929, vec2<f32>(_e952, 43.5));
            res = _e955;
            _ = res;
            let _e957 = pos_3;
            _ = (_e957 - vec3<f32>(-(1.0), 0.25, 0.0));
            _ = vec3<f32>(0.20000000298023224, 0.25, 0.05000000074505806);
            let _e968 = pos_3;
            let _e979 = sdEllipsoid((_e968 - vec3<f32>(-(1.0), 0.25, 0.0)), vec3<f32>(0.20000000298023224, 0.25, 0.05000000074505806));
            _ = vec2<f32>(_e979, 43.16999816894531);
            let _e982 = res;
            let _e983 = pos_3;
            _ = (_e983 - vec3<f32>(-(1.0), 0.25, 0.0));
            _ = vec3<f32>(0.20000000298023224, 0.25, 0.05000000074505806);
            let _e994 = pos_3;
            let _e1005 = sdEllipsoid((_e994 - vec3<f32>(-(1.0), 0.25, 0.0)), vec3<f32>(0.20000000298023224, 0.25, 0.05000000074505806));
            let _e1008 = opU(_e982, vec2<f32>(_e1005, 43.16999816894531));
            res = _e1008;
            _ = res;
            let _e1010 = pos_3;
            _ = (_e1010 - vec3<f32>(-(1.0), 0.25, 1.0));
            _ = vec2<f32>(cos(1.2999999523162842), sin(1.2999999523162842));
            _ = vec2<f32>(0.029999999329447746, 0.07999999821186066);
            let _e1029 = pos_3;
            let _e1048 = sdHorseshoe((_e1029 - vec3<f32>(-(1.0), 0.25, 1.0)), vec2<f32>(cos(1.2999999523162842), sin(1.2999999523162842)), 0.20000000298023224, 0.30000001192092896, vec2<f32>(0.029999999329447746, 0.07999999821186066));
            _ = vec2<f32>(_e1048, 11.5);
            let _e1051 = res;
            let _e1052 = pos_3;
            _ = (_e1052 - vec3<f32>(-(1.0), 0.25, 1.0));
            _ = vec2<f32>(cos(1.2999999523162842), sin(1.2999999523162842));
            _ = vec2<f32>(0.029999999329447746, 0.07999999821186066);
            let _e1071 = pos_3;
            let _e1090 = sdHorseshoe((_e1071 - vec3<f32>(-(1.0), 0.25, 1.0)), vec2<f32>(cos(1.2999999523162842), sin(1.2999999523162842)), 0.20000000298023224, 0.30000001192092896, vec2<f32>(0.029999999329447746, 0.07999999821186066));
            let _e1093 = opU(_e1051, vec2<f32>(_e1090, 11.5));
            res = _e1093;
        }
    }
    let _e1094 = pos_3;
    _ = (_e1094 - vec3<f32>(2.0, 0.30000001192092896, -(1.0)));
    _ = vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5);
    let _e1105 = pos_3;
    let _e1116 = sdBox((_e1105 - vec3<f32>(2.0, 0.30000001192092896, -(1.0))), vec3<f32>(0.3499999940395355, 0.30000001192092896, 2.5));
    let _e1117 = res;
    if (_e1116 < _e1117.x) {
        {
            _ = res;
            let _e1121 = pos_3;
            _ = (_e1121 - vec3<f32>(2.0, 0.20000000298023224, -(3.0)));
            let _e1130 = pos_3;
            let _e1139 = sdOctogonPrism((_e1130 - vec3<f32>(2.0, 0.20000000298023224, -(3.0))), 0.20000000298023224, 0.05000000074505806);
            _ = vec2<f32>(_e1139, 51.79999923706055);
            let _e1142 = res;
            let _e1143 = pos_3;
            _ = (_e1143 - vec3<f32>(2.0, 0.20000000298023224, -(3.0)));
            let _e1152 = pos_3;
            let _e1161 = sdOctogonPrism((_e1152 - vec3<f32>(2.0, 0.20000000298023224, -(3.0))), 0.20000000298023224, 0.05000000074505806);
            let _e1164 = opU(_e1142, vec2<f32>(_e1161, 51.79999923706055));
            res = _e1164;
            _ = res;
            let _e1166 = pos_3;
            _ = (_e1166 - vec3<f32>(2.0, 0.14000000059604645, -(2.0)));
            _ = vec3<f32>(0.10000000149011612, -(0.10000000149011612), 0.0);
            _ = vec3<f32>(-(0.20000000298023224), 0.3499999940395355, 0.10000000149011612);
            let _e1184 = pos_3;
            let _e1202 = sdCylinder_1((_e1184 - vec3<f32>(2.0, 0.14000000059604645, -(2.0))), vec3<f32>(0.10000000149011612, -(0.10000000149011612), 0.0), vec3<f32>(-(0.20000000298023224), 0.3499999940395355, 0.10000000149011612), 0.07999999821186066);
            _ = vec2<f32>(_e1202, 31.200000762939453);
            let _e1205 = res;
            let _e1206 = pos_3;
            _ = (_e1206 - vec3<f32>(2.0, 0.14000000059604645, -(2.0)));
            _ = vec3<f32>(0.10000000149011612, -(0.10000000149011612), 0.0);
            _ = vec3<f32>(-(0.20000000298023224), 0.3499999940395355, 0.10000000149011612);
            let _e1224 = pos_3;
            let _e1242 = sdCylinder_1((_e1224 - vec3<f32>(2.0, 0.14000000059604645, -(2.0))), vec3<f32>(0.10000000149011612, -(0.10000000149011612), 0.0), vec3<f32>(-(0.20000000298023224), 0.3499999940395355, 0.10000000149011612), 0.07999999821186066);
            let _e1245 = opU(_e1205, vec2<f32>(_e1242, 31.200000762939453));
            res = _e1245;
            _ = res;
            let _e1247 = pos_3;
            _ = (_e1247 - vec3<f32>(2.0, 0.09000000357627869, -(1.0)));
            _ = vec3<f32>(0.10000000149011612, 0.0, 0.0);
            _ = vec3<f32>(-(0.20000000298023224), 0.4000000059604645, 0.10000000149011612);
            let _e1265 = pos_3;
            let _e1283 = sdCappedCone_1((_e1265 - vec3<f32>(2.0, 0.09000000357627869, -(1.0))), vec3<f32>(0.10000000149011612, 0.0, 0.0), vec3<f32>(-(0.20000000298023224), 0.4000000059604645, 0.10000000149011612), 0.15000000596046448, 0.05000000074505806);
            _ = vec2<f32>(_e1283, 46.099998474121094);
            let _e1286 = res;
            let _e1287 = pos_3;
            _ = (_e1287 - vec3<f32>(2.0, 0.09000000357627869, -(1.0)));
            _ = vec3<f32>(0.10000000149011612, 0.0, 0.0);
            _ = vec3<f32>(-(0.20000000298023224), 0.4000000059604645, 0.10000000149011612);
            let _e1305 = pos_3;
            let _e1323 = sdCappedCone_1((_e1305 - vec3<f32>(2.0, 0.09000000357627869, -(1.0))), vec3<f32>(0.10000000149011612, 0.0, 0.0), vec3<f32>(-(0.20000000298023224), 0.4000000059604645, 0.10000000149011612), 0.15000000596046448, 0.05000000074505806);
            let _e1326 = opU(_e1286, vec2<f32>(_e1323, 46.099998474121094));
            res = _e1326;
            _ = res;
            let _e1328 = pos_3;
            _ = (_e1328 - vec3<f32>(2.0, 0.15000000596046448, 0.0));
            _ = vec3<f32>(0.10000000149011612, 0.0, 0.0);
            _ = vec3<f32>(-(0.10000000149011612), 0.3499999940395355, 0.10000000149011612);
            let _e1345 = pos_3;
            let _e1362 = sdRoundCone_1((_e1345 - vec3<f32>(2.0, 0.15000000596046448, 0.0)), vec3<f32>(0.10000000149011612, 0.0, 0.0), vec3<f32>(-(0.10000000149011612), 0.3499999940395355, 0.10000000149011612), 0.15000000596046448, 0.05000000074505806);
            _ = vec2<f32>(_e1362, 51.70000076293945);
            let _e1365 = res;
            let _e1366 = pos_3;
            _ = (_e1366 - vec3<f32>(2.0, 0.15000000596046448, 0.0));
            _ = vec3<f32>(0.10000000149011612, 0.0, 0.0);
            _ = vec3<f32>(-(0.10000000149011612), 0.3499999940395355, 0.10000000149011612);
            let _e1383 = pos_3;
            let _e1400 = sdRoundCone_1((_e1383 - vec3<f32>(2.0, 0.15000000596046448, 0.0)), vec3<f32>(0.10000000149011612, 0.0, 0.0), vec3<f32>(-(0.10000000149011612), 0.3499999940395355, 0.10000000149011612), 0.15000000596046448, 0.05000000074505806);
            let _e1403 = opU(_e1365, vec2<f32>(_e1400, 51.70000076293945));
            res = _e1403;
            _ = res;
            let _e1405 = pos_3;
            _ = (_e1405 - vec3<f32>(2.0, 0.20000000298023224, 1.0));
            let _e1414 = pos_3;
            let _e1423 = sdRoundCone((_e1414 - vec3<f32>(2.0, 0.20000000298023224, 1.0)), 0.20000000298023224, 0.10000000149011612, 0.30000001192092896);
            _ = vec2<f32>(_e1423, 37.0);
            let _e1426 = res;
            let _e1427 = pos_3;
            _ = (_e1427 - vec3<f32>(2.0, 0.20000000298023224, 1.0));
            let _e1436 = pos_3;
            let _e1445 = sdRoundCone((_e1436 - vec3<f32>(2.0, 0.20000000298023224, 1.0)), 0.20000000298023224, 0.10000000149011612, 0.30000001192092896);
            let _e1448 = opU(_e1426, vec2<f32>(_e1445, 37.0));
            res = _e1448;
        }
    }
    let _e1449 = res;
    return _e1449;
}

fn iBox(ro: vec3<f32>, rd: vec3<f32>, rad: vec3<f32>) -> vec2<f32> {
    var ro_1: vec3<f32>;
    var rd_1: vec3<f32>;
    var rad_1: vec3<f32>;
    var m_2: vec3<f32>;
    var n: vec3<f32>;
    var k_10: vec3<f32>;
    var t1_: vec3<f32>;
    var t2_: vec3<f32>;

    ro_1 = ro;
    rd_1 = rd;
    rad_1 = rad;
    let _e7 = rd_1;
    m_2 = (vec3<f32>(1.0) / _e7);
    let _e11 = m_2;
    let _e12 = ro_1;
    n = (_e11 * _e12);
    _ = m_2;
    let _e16 = m_2;
    let _e18 = rad_1;
    k_10 = (abs(_e16) * _e18);
    let _e21 = n;
    let _e23 = k_10;
    t1_ = (-(_e21) - _e23);
    let _e26 = n;
    let _e28 = k_10;
    t2_ = (-(_e26) + _e28);
    let _e31 = t1_;
    _ = _e31.x;
    let _e33 = t1_;
    _ = _e33.y;
    let _e35 = t1_;
    let _e37 = t1_;
    _ = max(_e35.x, _e37.y);
    let _e40 = t1_;
    _ = _e40.z;
    let _e42 = t1_;
    _ = _e42.x;
    let _e44 = t1_;
    _ = _e44.y;
    let _e46 = t1_;
    let _e48 = t1_;
    let _e51 = t1_;
    let _e54 = t2_;
    _ = _e54.x;
    let _e56 = t2_;
    _ = _e56.y;
    let _e58 = t2_;
    let _e60 = t2_;
    _ = min(_e58.x, _e60.y);
    let _e63 = t2_;
    _ = _e63.z;
    let _e65 = t2_;
    _ = _e65.x;
    let _e67 = t2_;
    _ = _e67.y;
    let _e69 = t2_;
    let _e71 = t2_;
    let _e74 = t2_;
    return vec2<f32>(max(max(_e46.x, _e48.y), _e51.z), min(min(_e69.x, _e71.y), _e74.z));
}

fn raycast(ro_2: vec3<f32>, rd_2: vec3<f32>) -> vec2<f32> {
    var ro_3: vec3<f32>;
    var rd_3: vec3<f32>;
    var res_1: vec2<f32>;
    var tmin: f32;
    var tmax: f32;
    var tp1_: f32;
    var tb: vec2<f32>;
    var t_3: f32;
    var i: i32;
    var h_19: vec2<f32>;

    ro_3 = ro_2;
    rd_3 = rd_2;
    res_1 = vec2<f32>(-(1.0), -(1.0));
    tmin = 1.0;
    tmax = 20.0;
    let _e15 = ro_3;
    let _e18 = rd_3;
    tp1_ = ((0.0 - _e15.y) / _e18.y);
    let _e22 = tp1_;
    if (_e22 > 0.0) {
        {
            _ = tmax;
            _ = tp1_;
            let _e27 = tmax;
            let _e28 = tp1_;
            tmax = min(_e27, _e28);
            let _e30 = tp1_;
            res_1 = vec2<f32>(_e30, 1.0);
        }
    }
    let _e33 = ro_3;
    _ = (_e33 - vec3<f32>(0.0, 0.4000000059604645, -(0.5)));
    _ = rd_3;
    _ = vec3<f32>(2.5, 0.4099999964237213, 3.0);
    let _e45 = ro_3;
    let _e52 = rd_3;
    let _e57 = iBox((_e45 - vec3<f32>(0.0, 0.4000000059604645, -(0.5))), _e52, vec3<f32>(2.5, 0.4099999964237213, 3.0));
    tb = _e57;
    let _e59 = tb;
    let _e61 = tb;
    let _e64 = tb;
    let _e69 = tb;
    let _e71 = tmax;
    if (((_e59.x < _e61.y) && (_e64.y > 0.0)) && (_e69.x < _e71)) {
        {
            let _e74 = tb;
            _ = _e74.x;
            _ = tmin;
            let _e77 = tb;
            let _e79 = tmin;
            tmin = max(_e77.x, _e79);
            let _e81 = tb;
            _ = _e81.y;
            _ = tmax;
            let _e84 = tb;
            let _e86 = tmax;
            tmax = min(_e84.y, _e86);
            let _e88 = tmin;
            t_3 = _e88;
            i = 0;
            loop {
                let _e92 = i;
                let _e95 = t_3;
                let _e96 = tmax;
                if !(((_e92 < 70) && (_e95 < _e96))) {
                    break;
                }
                {
                    let _e103 = ro_3;
                    let _e104 = rd_3;
                    let _e105 = t_3;
                    _ = (_e103 + (_e104 * _e105));
                    let _e108 = ro_3;
                    let _e109 = rd_3;
                    let _e110 = t_3;
                    let _e113 = map((_e108 + (_e109 * _e110)));
                    h_19 = _e113;
                    let _e115 = h_19;
                    _ = _e115.x;
                    let _e117 = h_19;
                    let _e121 = t_3;
                    if (abs(_e117.x) < (9.999999747378752e-5 * _e121)) {
                        {
                            let _e124 = t_3;
                            let _e125 = h_19;
                            res_1 = vec2<f32>(_e124, _e125.y);
                            break;
                        }
                    }
                    let _e128 = t_3;
                    let _e129 = h_19;
                    t_3 = (_e128 + _e129.x);
                }
                continuing {
                    let _e100 = i;
                    i = (_e100 + 1);
                }
            }
        }
    }
    let _e132 = res_1;
    return _e132;
}

fn calcSoftshadow(ro_4: vec3<f32>, rd_4: vec3<f32>, mint: f32, tmax_1: f32) -> f32 {
    var ro_5: vec3<f32>;
    var rd_5: vec3<f32>;
    var mint_1: f32;
    var tmax_2: f32;
    var tp: f32;
    var res_2: f32;
    var t_4: f32;
    var i_1: i32;
    var h_20: f32;
    var s_8: f32;

    ro_5 = ro_4;
    rd_5 = rd_4;
    mint_1 = mint;
    tmax_2 = tmax_1;
    let _e9 = ro_5;
    let _e12 = rd_5;
    tp = ((0.800000011920929 - _e9.y) / _e12.y);
    let _e16 = tp;
    if (_e16 > 0.0) {
        _ = tmax_2;
        _ = tp;
        let _e21 = tmax_2;
        let _e22 = tp;
        tmax_2 = min(_e21, _e22);
    }
    res_2 = 1.0;
    let _e26 = mint_1;
    t_4 = _e26;
    i_1 = min(0, 0);
    loop {
        let _e34 = i_1;
        if !((_e34 < 24)) {
            break;
        }
        {
            let _e41 = ro_5;
            let _e42 = rd_5;
            let _e43 = t_4;
            _ = (_e41 + (_e42 * _e43));
            let _e46 = ro_5;
            let _e47 = rd_5;
            let _e48 = t_4;
            let _e51 = map((_e46 + (_e47 * _e48)));
            h_20 = _e51.x;
            let _e55 = h_20;
            let _e57 = t_4;
            _ = ((8.0 * _e55) / _e57);
            let _e62 = h_20;
            let _e64 = t_4;
            s_8 = clamp(((8.0 * _e62) / _e64), 0.0, 1.0);
            _ = res_2;
            _ = s_8;
            let _e72 = res_2;
            let _e73 = s_8;
            res_2 = min(_e72, _e73);
            let _e75 = t_4;
            _ = h_20;
            let _e79 = h_20;
            t_4 = (_e75 + clamp(_e79, 0.009999999776482582, 0.20000000298023224));
            let _e84 = res_2;
            let _e87 = t_4;
            let _e88 = tmax_2;
            if ((_e84 < 0.004000000189989805) || (_e87 > _e88)) {
                break;
            }
        }
        continuing {
            let _e38 = i_1;
            i_1 = (_e38 + 1);
        }
    }
    _ = res_2;
    let _e94 = res_2;
    res_2 = clamp(_e94, 0.0, 1.0);
    let _e98 = res_2;
    let _e99 = res_2;
    let _e103 = res_2;
    return ((_e98 * _e99) * (3.0 - (2.0 * _e103)));
}

fn calcNormal(pos_4: vec3<f32>) -> vec3<f32> {
    var pos_5: vec3<f32>;
    var n_1: vec3<f32>;
    var i_2: i32;
    var e_2: vec3<f32>;

    pos_5 = pos_4;
    n_1 = vec3<f32>(0.0);
    i_2 = min(0, 0);
    loop {
        let _e11 = i_2;
        if !((_e11 < 4)) {
            break;
        }
        {
            let _e20 = i_2;
            let _e28 = i_2;
            let _e34 = i_2;
            e_2 = (0.5773000121116638 * ((2.0 * vec3<f32>(f32((((_e20 + 3) >> u32(1)) & 1)), f32(((_e28 >> u32(1)) & 1)), f32((_e34 & 1)))) - vec3<f32>(1.0)));
            let _e47 = n_1;
            let _e48 = e_2;
            let _e49 = pos_5;
            let _e51 = e_2;
            _ = (_e49 + (0.0005000000237487257 * _e51));
            let _e54 = pos_5;
            let _e56 = e_2;
            let _e59 = map((_e54 + (0.0005000000237487257 * _e56)));
            n_1 = (_e47 + (_e48 * _e59.x));
        }
        continuing {
            let _e15 = i_2;
            i_2 = (_e15 + 1);
        }
    }
    _ = n_1;
    let _e64 = n_1;
    return normalize(_e64);
}

fn calcAO(pos_6: vec3<f32>, nor: vec3<f32>) -> f32 {
    var pos_7: vec3<f32>;
    var nor_1: vec3<f32>;
    var occ: f32;
    var sca: f32;
    var i_3: i32;
    var h_21: f32;
    var d_7: f32;

    pos_7 = pos_6;
    nor_1 = nor;
    occ = 0.0;
    sca = 1.0;
    i_3 = min(0, 0);
    loop {
        let _e14 = i_3;
        if !((_e14 < 5)) {
            break;
        }
        {
            let _e23 = i_3;
            h_21 = (0.009999999776482582 + ((0.11999999731779099 * f32(_e23)) / 4.0));
            let _e30 = pos_7;
            let _e31 = h_21;
            let _e32 = nor_1;
            _ = (_e30 + (_e31 * _e32));
            let _e35 = pos_7;
            let _e36 = h_21;
            let _e37 = nor_1;
            let _e40 = map((_e35 + (_e36 * _e37)));
            d_7 = _e40.x;
            let _e43 = occ;
            let _e44 = h_21;
            let _e45 = d_7;
            let _e47 = sca;
            occ = (_e43 + ((_e44 - _e45) * _e47));
            let _e50 = sca;
            sca = (_e50 * 0.949999988079071);
            let _e53 = occ;
            if (_e53 > 0.3499999940395355) {
                break;
            }
        }
        continuing {
            let _e18 = i_3;
            i_3 = (_e18 + 1);
        }
    }
    let _e58 = occ;
    _ = (1.0 - (3.0 * _e58));
    let _e65 = occ;
    let _e73 = nor_1;
    return (clamp((1.0 - (3.0 * _e65)), 0.0, 1.0) * (0.5 + (0.5 * _e73.y)));
}

fn checkersGradBox(p_47: vec2<f32>, dpdx: vec2<f32>, dpdy: vec2<f32>) -> f32 {
    var p_48: vec2<f32>;
    var dpdx_1: vec2<f32>;
    var dpdy_1: vec2<f32>;
    var w_5: vec2<f32>;
    var i_4: vec2<f32>;

    p_48 = p_47;
    dpdx_1 = dpdx;
    dpdy_1 = dpdy;
    _ = dpdx_1;
    let _e7 = dpdx_1;
    _ = dpdy_1;
    let _e10 = dpdy_1;
    w_5 = ((abs(_e7) + abs(_e10)) + vec2<f32>(0.0010000000474974513));
    let _e18 = p_48;
    let _e20 = w_5;
    _ = ((_e18 - (0.5 * _e20)) * 0.5);
    let _e25 = p_48;
    let _e27 = w_5;
    _ = (fract(((_e25 - (0.5 * _e27)) * 0.5)) - vec2<f32>(0.5));
    let _e36 = p_48;
    let _e38 = w_5;
    _ = ((_e36 - (0.5 * _e38)) * 0.5);
    let _e43 = p_48;
    let _e45 = w_5;
    let _e55 = p_48;
    let _e57 = w_5;
    _ = ((_e55 + (0.5 * _e57)) * 0.5);
    let _e62 = p_48;
    let _e64 = w_5;
    _ = (fract(((_e62 + (0.5 * _e64)) * 0.5)) - vec2<f32>(0.5));
    let _e73 = p_48;
    let _e75 = w_5;
    _ = ((_e73 + (0.5 * _e75)) * 0.5);
    let _e80 = p_48;
    let _e82 = w_5;
    let _e94 = w_5;
    i_4 = ((2.0 * (abs((fract(((_e43 - (0.5 * _e45)) * 0.5)) - vec2<f32>(0.5))) - abs((fract(((_e80 + (0.5 * _e82)) * 0.5)) - vec2<f32>(0.5))))) / _e94);
    let _e99 = i_4;
    let _e102 = i_4;
    return (0.5 - ((0.5 * _e99.x) * _e102.y));
}

fn render(ro_6: vec3<f32>, rd_6: vec3<f32>, rdx: vec3<f32>, rdy: vec3<f32>) -> vec3<f32> {
    var ro_7: vec3<f32>;
    var rd_7: vec3<f32>;
    var rdx_1: vec3<f32>;
    var rdy_1: vec3<f32>;
    var col: vec3<f32>;
    var res_3: vec2<f32>;
    var t_5: f32;
    var m_3: f32;
    var pos_8: vec3<f32>;
    var local_17: vec3<f32>;
    var nor_2: vec3<f32>;
    var ref_: vec3<f32>;
    var ks: f32;
    var dpdx_2: vec3<f32>;
    var dpdy_2: vec3<f32>;
    var f_2: f32;
    var occ_1: f32;
    var lin: vec3<f32>;
    var lig: vec3<f32>;
    var hal: vec3<f32>;
    var dif: f32;
    var spe: f32;
    var dif_1: f32;
    var spe_1: f32;
    var dif_2: f32;
    var dif_3: f32;

    ro_7 = ro_6;
    rd_7 = rd_6;
    rdx_1 = rdx;
    rdy_1 = rdy;
    let _e12 = rd_7;
    _ = _e12.y;
    let _e15 = rd_7;
    col = (vec3<f32>(0.699999988079071, 0.699999988079071, 0.8999999761581421) - vec3<f32>((max(_e15.y, 0.0) * 0.30000001192092896)));
    _ = ro_7;
    _ = rd_7;
    let _e26 = ro_7;
    let _e27 = rd_7;
    let _e28 = raycast(_e26, _e27);
    res_3 = _e28;
    let _e30 = res_3;
    t_5 = _e30.x;
    let _e33 = res_3;
    m_3 = _e33.y;
    let _e36 = m_3;
    if (_e36 > -(0.5)) {
        {
            let _e40 = ro_7;
            let _e41 = t_5;
            let _e42 = rd_7;
            pos_8 = (_e40 + (_e41 * _e42));
            let _e46 = m_3;
            if (_e46 < 1.5) {
                local_17 = vec3<f32>(0.0, 1.0, 0.0);
            } else {
                _ = pos_8;
                let _e54 = pos_8;
                let _e55 = calcNormal(_e54);
                local_17 = _e55;
            }
            let _e57 = local_17;
            nor_2 = _e57;
            _ = rd_7;
            _ = nor_2;
            let _e61 = rd_7;
            let _e62 = nor_2;
            ref_ = reflect(_e61, _e62);
            let _e67 = m_3;
            _ = (vec3<f32>((_e67 * 2.0)) + vec3<f32>(0.0, 1.0, 2.0));
            let _e76 = m_3;
            col = (vec3<f32>(0.20000000298023224) + (0.20000000298023224 * sin((vec3<f32>((_e76 * 2.0)) + vec3<f32>(0.0, 1.0, 2.0)))));
            ks = 1.0;
            let _e91 = m_3;
            if (_e91 < 1.5) {
                {
                    let _e94 = ro_7;
                    let _e96 = rd_7;
                    let _e97 = rd_7;
                    let _e101 = rdx_1;
                    let _e102 = rdx_1;
                    dpdx_2 = (_e94.y * ((_e96 / vec3<f32>(_e97.y)) - (_e101 / vec3<f32>(_e102.y))));
                    let _e109 = ro_7;
                    let _e111 = rd_7;
                    let _e112 = rd_7;
                    let _e116 = rdy_1;
                    let _e117 = rdy_1;
                    dpdy_2 = (_e109.y * ((_e111 / vec3<f32>(_e112.y)) - (_e116 / vec3<f32>(_e117.y))));
                    let _e125 = pos_8;
                    _ = (3.0 * _e125.xz);
                    let _e129 = dpdx_2;
                    _ = (3.0 * _e129.xz);
                    let _e133 = dpdy_2;
                    _ = (3.0 * _e133.xz);
                    let _e137 = pos_8;
                    let _e141 = dpdx_2;
                    let _e145 = dpdy_2;
                    let _e148 = checkersGradBox((3.0 * _e137.xz), (3.0 * _e141.xz), (3.0 * _e145.xz));
                    f_2 = _e148;
                    let _e151 = f_2;
                    col = (vec3<f32>(0.15000000596046448) + (_e151 * vec3<f32>(0.05000000074505806)));
                    ks = 0.4000000059604645;
                }
            }
            _ = pos_8;
            _ = nor_2;
            let _e160 = pos_8;
            let _e161 = nor_2;
            let _e162 = calcAO(_e160, _e161);
            occ_1 = _e162;
            lin = vec3<f32>(0.0);
            {
                _ = vec3<f32>(-(0.5), 0.4000000059604645, -(0.6000000238418579));
                lig = normalize(vec3<f32>(-(0.5), 0.4000000059604645, -(0.6000000238418579)));
                let _e181 = lig;
                let _e182 = rd_7;
                _ = (_e181 - _e182);
                let _e184 = lig;
                let _e185 = rd_7;
                hal = normalize((_e184 - _e185));
                _ = nor_2;
                _ = lig;
                let _e191 = nor_2;
                let _e192 = lig;
                _ = dot(_e191, _e192);
                _ = nor_2;
                _ = lig;
                let _e198 = nor_2;
                let _e199 = lig;
                dif = clamp(dot(_e198, _e199), 0.0, 1.0);
                let _e205 = dif;
                _ = pos_8;
                _ = lig;
                let _e210 = pos_8;
                let _e211 = lig;
                let _e214 = calcSoftshadow(_e210, _e211, 0.019999999552965164, 2.5);
                dif = (_e205 * _e214);
                _ = nor_2;
                _ = hal;
                let _e218 = nor_2;
                let _e219 = hal;
                _ = dot(_e218, _e219);
                _ = nor_2;
                _ = hal;
                let _e225 = nor_2;
                let _e226 = hal;
                _ = clamp(dot(_e225, _e226), 0.0, 1.0);
                _ = nor_2;
                _ = hal;
                let _e234 = nor_2;
                let _e235 = hal;
                _ = dot(_e234, _e235);
                _ = nor_2;
                _ = hal;
                let _e241 = nor_2;
                let _e242 = hal;
                spe = pow(clamp(dot(_e241, _e242), 0.0, 1.0), 16.0);
                let _e250 = spe;
                let _e251 = dif;
                spe = (_e250 * _e251);
                let _e253 = spe;
                _ = hal;
                _ = lig;
                let _e259 = hal;
                let _e260 = lig;
                _ = (1.0 - dot(_e259, _e260));
                _ = hal;
                _ = lig;
                let _e268 = hal;
                let _e269 = lig;
                _ = clamp((1.0 - dot(_e268, _e269)), 0.0, 1.0);
                _ = hal;
                _ = lig;
                let _e279 = hal;
                let _e280 = lig;
                _ = (1.0 - dot(_e279, _e280));
                _ = hal;
                _ = lig;
                let _e288 = hal;
                let _e289 = lig;
                spe = (_e253 * (0.03999999910593033 + (0.9599999785423279 * pow(clamp((1.0 - dot(_e288, _e289)), 0.0, 1.0), 5.0))));
                let _e300 = lin;
                let _e301 = col;
                let _e304 = dif;
                lin = (_e300 + (((_e301 * 2.200000047683716) * _e304) * vec3<f32>(1.2999999523162842, 1.0, 0.699999988079071)));
                let _e312 = lin;
                let _e314 = spe;
                let _e321 = ks;
                lin = (_e312 + (((5.0 * _e314) * vec3<f32>(1.2999999523162842, 1.0, 0.699999988079071)) * _e321));
            }
            {
                let _e326 = nor_2;
                _ = (0.5 + (0.5 * _e326.y));
                let _e334 = nor_2;
                _ = clamp((0.5 + (0.5 * _e334.y)), 0.0, 1.0);
                let _e343 = nor_2;
                _ = (0.5 + (0.5 * _e343.y));
                let _e351 = nor_2;
                dif_1 = sqrt(clamp((0.5 + (0.5 * _e351.y)), 0.0, 1.0));
                let _e360 = dif_1;
                let _e361 = occ_1;
                dif_1 = (_e360 * _e361);
                _ = -(0.20000000298023224);
                let _e366 = ref_;
                _ = _e366.y;
                let _e371 = ref_;
                spe_1 = smoothstep(-(0.20000000298023224), 0.20000000298023224, _e371.y);
                let _e375 = spe_1;
                let _e376 = dif_1;
                spe_1 = (_e375 * _e376);
                let _e378 = spe_1;
                _ = nor_2;
                _ = rd_7;
                let _e384 = nor_2;
                let _e385 = rd_7;
                _ = (1.0 + dot(_e384, _e385));
                _ = nor_2;
                _ = rd_7;
                let _e393 = nor_2;
                let _e394 = rd_7;
                _ = clamp((1.0 + dot(_e393, _e394)), 0.0, 1.0);
                _ = nor_2;
                _ = rd_7;
                let _e404 = nor_2;
                let _e405 = rd_7;
                _ = (1.0 + dot(_e404, _e405));
                _ = nor_2;
                _ = rd_7;
                let _e413 = nor_2;
                let _e414 = rd_7;
                spe_1 = (_e378 * (0.03999999910593033 + (0.9599999785423279 * pow(clamp((1.0 + dot(_e413, _e414)), 0.0, 1.0), 5.0))));
                let _e425 = spe_1;
                _ = pos_8;
                _ = ref_;
                let _e430 = pos_8;
                let _e431 = ref_;
                let _e434 = calcSoftshadow(_e430, _e431, 0.019999999552965164, 2.5);
                spe_1 = (_e425 * _e434);
                let _e436 = lin;
                let _e437 = col;
                let _e440 = dif_1;
                lin = (_e436 + (((_e437 * 0.6000000238418579) * _e440) * vec3<f32>(0.4000000059604645, 0.6000000238418579, 1.149999976158142)));
                let _e448 = lin;
                let _e450 = spe_1;
                let _e457 = ks;
                lin = (_e448 + (((2.0 * _e450) * vec3<f32>(0.4000000059604645, 0.6000000238418579, 1.2999999523162842)) * _e457));
            }
            {
                _ = nor_2;
                _ = vec3<f32>(0.5, 0.0, 0.6000000238418579);
                _ = normalize(vec3<f32>(0.5, 0.0, 0.6000000238418579));
                let _e470 = nor_2;
                _ = vec3<f32>(0.5, 0.0, 0.6000000238418579);
                _ = dot(_e470, normalize(vec3<f32>(0.5, 0.0, 0.6000000238418579)));
                _ = nor_2;
                _ = vec3<f32>(0.5, 0.0, 0.6000000238418579);
                _ = normalize(vec3<f32>(0.5, 0.0, 0.6000000238418579));
                let _e493 = nor_2;
                _ = vec3<f32>(0.5, 0.0, 0.6000000238418579);
                let _e508 = pos_8;
                _ = (1.0 - _e508.y);
                let _e514 = pos_8;
                dif_2 = (clamp(dot(_e493, normalize(vec3<f32>(0.5, 0.0, 0.6000000238418579))), 0.0, 1.0) * clamp((1.0 - _e514.y), 0.0, 1.0));
                let _e522 = dif_2;
                let _e523 = occ_1;
                dif_2 = (_e522 * _e523);
                let _e525 = lin;
                let _e526 = col;
                let _e529 = dif_2;
                lin = (_e525 + (((_e526 * 0.550000011920929) * _e529) * vec3<f32>(0.25, 0.25, 0.25)));
            }
            {
                _ = nor_2;
                _ = rd_7;
                let _e540 = nor_2;
                let _e541 = rd_7;
                _ = (1.0 + dot(_e540, _e541));
                _ = nor_2;
                _ = rd_7;
                let _e549 = nor_2;
                let _e550 = rd_7;
                _ = clamp((1.0 + dot(_e549, _e550)), 0.0, 1.0);
                _ = nor_2;
                _ = rd_7;
                let _e560 = nor_2;
                let _e561 = rd_7;
                _ = (1.0 + dot(_e560, _e561));
                _ = nor_2;
                _ = rd_7;
                let _e569 = nor_2;
                let _e570 = rd_7;
                dif_3 = pow(clamp((1.0 + dot(_e569, _e570)), 0.0, 1.0), 2.0);
                let _e579 = dif_3;
                let _e580 = occ_1;
                dif_3 = (_e579 * _e580);
                let _e582 = lin;
                let _e583 = col;
                let _e586 = dif_3;
                lin = (_e582 + (((_e583 * 0.25) * _e586) * vec3<f32>(1.0, 1.0, 1.0)));
            }
            let _e594 = lin;
            col = _e594;
            _ = col;
            _ = vec3<f32>(0.699999988079071, 0.699999988079071, 0.8999999761581421);
            let _e603 = t_5;
            let _e605 = t_5;
            let _e607 = t_5;
            _ = (((-(9.999999747378752e-5) * _e603) * _e605) * _e607);
            let _e611 = t_5;
            let _e613 = t_5;
            let _e615 = t_5;
            _ = (1.0 - exp((((-(9.999999747378752e-5) * _e611) * _e613) * _e615)));
            let _e619 = col;
            let _e627 = t_5;
            let _e629 = t_5;
            let _e631 = t_5;
            _ = (((-(9.999999747378752e-5) * _e627) * _e629) * _e631);
            let _e635 = t_5;
            let _e637 = t_5;
            let _e639 = t_5;
            col = mix(_e619, vec3<f32>(0.699999988079071, 0.699999988079071, 0.8999999761581421), vec3<f32>((1.0 - exp((((-(9.999999747378752e-5) * _e635) * _e637) * _e639)))));
        }
    }
    _ = col;
    let _e648 = col;
    return vec3<f32>(clamp(_e648, vec3<f32>(0.0), vec3<f32>(1.0)));
}

fn setCamera(ro_8: vec3<f32>, ta: vec3<f32>, cr: f32) -> mat3x3<f32> {
    var ro_9: vec3<f32>;
    var ta_1: vec3<f32>;
    var cr_1: f32;
    var cw: vec3<f32>;
    var cp: vec3<f32>;
    var cu: vec3<f32>;
    var cv: vec3<f32>;

    ro_9 = ro_8;
    ta_1 = ta;
    cr_1 = cr;
    let _e6 = ta_1;
    let _e7 = ro_9;
    _ = (_e6 - _e7);
    let _e9 = ta_1;
    let _e10 = ro_9;
    cw = normalize((_e9 - _e10));
    _ = cr_1;
    let _e15 = cr_1;
    _ = cr_1;
    let _e18 = cr_1;
    cp = vec3<f32>(sin(_e15), cos(_e18), 0.0);
    _ = cw;
    _ = cp;
    let _e25 = cw;
    let _e26 = cp;
    _ = cross(_e25, _e26);
    _ = cw;
    _ = cp;
    let _e30 = cw;
    let _e31 = cp;
    cu = normalize(cross(_e30, _e31));
    _ = cu;
    _ = cw;
    let _e37 = cu;
    let _e38 = cw;
    cv = cross(_e37, _e38);
    let _e41 = cu;
    let _e42 = cv;
    let _e43 = cw;
    return mat3x3<f32>(vec3<f32>(_e41.x, _e41.y, _e41.z), vec3<f32>(_e42.x, _e42.y, _e42.z), vec3<f32>(_e43.x, _e43.y, _e43.z));
}

fn main_1() {
    var mo: vec2<f32>;
    var time: f32;
    var ta_2: vec3<f32>;
    var ro_10: vec3<f32>;
    var ca_1: mat3x3<f32>;
    var tot: vec3<f32>;
    var p_49: vec2<f32>;
    var fl: f32;
    var rd_8: vec3<f32>;
    var px: vec2<f32>;
    var py: vec2<f32>;
    var rdx_2: vec3<f32>;
    var rdy_2: vec3<f32>;
    var col_1: vec3<f32>;

    mo = globals.resolution.xy;
    time = (32.0 + (globals.time * 1.5));
    ta_2 = vec3<f32>(0.25, -(0.75), -(0.75));
    let _e22 = ta_2;
    let _e25 = time;
    let _e28 = mo;
    _ = ((0.10000000149011612 * _e25) + (7.0 * _e28.x));
    let _e33 = time;
    let _e36 = mo;
    let _e45 = time;
    let _e48 = mo;
    _ = ((0.10000000149011612 * _e45) + (7.0 * _e48.x));
    let _e53 = time;
    let _e56 = mo;
    ro_10 = (_e22 + vec3<f32>((4.5 * cos(((0.10000000149011612 * _e33) + (7.0 * _e36.x)))), 2.200000047683716, (4.5 * sin(((0.10000000149011612 * _e53) + (7.0 * _e56.x))))));
    _ = ro_10;
    _ = ta_2;
    let _e68 = ro_10;
    let _e69 = ta_2;
    let _e71 = setCamera(_e68, _e69, 0.0);
    ca_1 = _e71;
    tot = vec3<f32>(0.0);
    let _e77 = fragCoord_1;
    p_49 = (((2.0 * _e77) - globals.resolution.xy) / vec2<f32>(globals.resolution.y));
    fl = 2.5;
    let _e97 = ca_1;
    let _e98 = p_49;
    let _e99 = fl;
    _ = vec3<f32>(_e98.x, _e98.y, _e99);
    let _e103 = p_49;
    let _e104 = fl;
    rd_8 = (_e97 * normalize(vec3<f32>(_e103.x, -_e103.y, _e104)));
    let _e112 = fragCoord_1;
    px = (((2.0 * (_e112 + vec2<f32>(1.0, 0.0))) - globals.resolution.xy) / vec2<f32>(globals.resolution.y));
    let _e135 = fragCoord_1;
    py = (((2.0 * (_e135 + vec2<f32>(0.0, 1.0))) - globals.resolution.xy) / vec2<f32>(globals.resolution.y));
    let _e157 = ca_1;
    let _e158 = px;
    let _e159 = fl;
    _ = vec3<f32>(_e158.x, _e158.y, _e159);
    let _e163 = px;
    let _e164 = fl;
    rdx_2 = (_e157 * normalize(vec3<f32>(_e163.x, _e163.y, _e164)));
    let _e171 = ca_1;
    let _e172 = py;
    let _e173 = fl;
    _ = vec3<f32>(_e172.x, _e172.y, _e173);
    let _e177 = py;
    let _e178 = fl;
    rdy_2 = (_e171 * normalize(vec3<f32>(_e177.x, _e177.y, _e178)));
    _ = ro_10;
    _ = rd_8;
    _ = rdx_2;
    _ = rdy_2;
    let _e189 = ro_10;
    let _e190 = rd_8;
    let _e191 = rdx_2;
    let _e192 = rdy_2;
    let _e193 = render(_e189, _e190, _e191, _e192);
    col_1 = _e193;
    _ = col_1;
    _ = vec3<f32>(0.4544999897480011);
    let _e198 = col_1;
    col_1 = pow(_e198, vec3<f32>(0.4544999897480011));
    let _e202 = tot;
    let _e203 = col_1;
    tot = (_e202 + _e203);
    let _e205 = tot;
    fragColor = vec4<f32>(_e205.x, _e205.y, _e205.z, 1.0);
    return;
}

struct VertexInput {
    @location(0) position: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) fragCoord: vec4<f32>,
};

struct GlobalUniform {
    resolution: vec2<f32>,
    time: f32,
    seed: u32,
}

@group(0) @binding(0)
var<uniform> globals: GlobalUniform;

@vertex
fn vs_main(input: VertexInput) -> VertexOutput {
    var output: VertexOutput;
    output.fragCoord = vec4<f32>(input.position, 1.0);
    return output;
}

@fragment 
fn fs_main(vertex_output: VertexOutput) -> FragmentOutput {
    fragCoord_1 = vertex_output.fragCoord.xy;
    main_1();
    let _e7 = fragColor;
    return FragmentOutput(_e7);
}
